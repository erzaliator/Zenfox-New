<?php

/**
 * AuditReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class AuditReport extends BaseAuditReport
{
	public function checkError($sourceId, $playerId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
						->from('AuditReport a')
						->where('a.source_id = ?', $sourceId)
						->andWhere('a.player_id = ?', $playerId);
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		if($result)
		{
			return array(
				'auditId' => $result[0]['audit_id'],
				'processed' => $result[0]['processed'],
				'error' => $result[0]['error'],
				'notes' => $result[0]['notes']);
		}
		return NULL;
	}
	
	public function checkIfPresent($sourceId, $playerId, $transactionType = NULL)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
		           ->from('AuditReport t')
					->where('t.player_id = ?', $playerId)
					->andWhere('t.source_id = ?', $sourceId);

		if($transactionType)
		{
			$query = $query->andWhere('t.transaction_type = ?', $transactionType);
		}
		$query = $query->limit(1);
					
		if($query->count() != 1)
		{
			return false;
		}
		else 
		{
			return true;
		}
	}
	
	public function getTransaction($playerId, $transactionType = null)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		if($transactionType != null)
		{
		$query = Zenfox_Query::create()
		           ->from('AuditReport t')
					->where('t.player_id = ?', $playerId)
					->andWhere('t.transaction_type = ?', $transactionType)
					->orderBy('t.trans_end_time DESC');
		}
					
		if($transactionType == null)			
		{
			$query = Zenfox_Query::create()
		           ->from('AuditReport t')
					->where('t.player_id = ?', $playerId)
					->orderBy('t.trans_end_time DESC');
		
		}		
			$array = $query->fetchArray();	
			//Zenfox_Debug::dump($array,'array data',true,true);		
			return $array;
	}
	
	public function getTransactionData($offset, $itemsPerPage, $fromDate = NULL, $toDate = NULL, $transType = NULL, $status = NULL, $playerId, $download = NULL)
	{
	  //echo $playerId; exit();
		/*$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
	    Doctrine_Manager::getInstance()->setCurrentConnection($conn);*/
	    //echo $conn;
	   // echo Doctrine_Manager::getInstance()->getCurrentConnection()->getName();
	   // exit();
	/*   $query = Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array($fromDate, $toDate))
	    			->andWhere('ar.transaction_type = ?',$transType);
	    print_r($query->fetchArray());exit();*/
	    /*if($fromDate && $toDate)
	    {*/
	    if($playerId)
	    {
	    	$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('$fromDate', '$toDate'))
	    			->andWhereIn('ar.transaction_type',array($transType))
	    			->andWhere('ar.player_id = ?','$playerId')
	    			->andWhereIn('ar.transaction_status',array($status))";
	    	/*if($transType != NULL && $transType != 'ALL' && $status != NULL)
	    	{
	    		
	    		$statusStr = implode(',', $status);
	    		
	    		$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('$fromDate', '$toDate'))
	    			->andWhere('ar.transaction_type = ?','$transType')
	    			->andWhere('ar.player_id = ?','$playerId')
	    			->andWhereIn('ar.transaction_status',array($statusStr))";
	    	}
	    	
	    	if($transType != NULL && $transType != 'ALL' && $status == NULL)
	    	{
	    		
	    		$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('$fromDate', '$toDate'))
	    			->andWhere('ar.player_id = ?','$playerId')
	    			->andWhere('ar.transaction_type = ?','$transType')";
	    	}*/
	    	
	    }
	    else
	    {
	    	if($transType != NULL && $transType != 'ALL' && $status == NULL)
	    	{
	    		
	    		$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('$fromDate', '$toDate'))";
	    	}

	    	if($transType != NULL && $transType != 'ALL' && $status != NULL)
	    	{
	    		echo $playerId;
	    		$statusStr = implode(',', $status);
	    		
	    		$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('$fromDate', '$toDate'))
	    			->andWhere('ar.transaction_type = ?','$transType')
	    			->andWhereIn('ar.transaction_status',array($statusStr))";
	    	}
	    }
	    /*}
	    elseif($transType != NULL && $transType != 'ALL')
	    {
	    	$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->where('ar.transaction_type = ?','$transType')";
	    }
	    else
	    {
	    	$query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')";
	    }
	   */
    	
	    if($download == NULL)
	    {	
		  	$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query,-1);
		   	$paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
	    	$paginator =  new Zend_Paginator($adapter);
	    	$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
			$paginatorSession->unsetAll();
			$transLogs = array();
			$date = new Zenfox_Date();
			$currency = new Zenfox_Currency();
			$index = 0;
	    	if($paginator->getTotalItemCount())
			{
				foreach($paginator as $logs)
				{
					switch($logs['transaction_type'])
					{
						case 'AWARD_WINNINGS':
							$transactionType = 'Winning';
							break;
						case 'CREDIT_DEPOSITS':
							$transactionType = 'Deposits';
							break;
						case 'PLACE_WAGER':
							$transactionType = 'Wager';
							break;
						case 'CREDIT_BONUS' :
							$transactionType = 'Bonus Credit';
							break;
					}
					$transLogs[$index]['Audit Id'] = $logs['audit_id'];
					$transLogs[$index]['Transaction Type'] = $transactionType;
					//$transLogs[$index][$translate->translate('Amount Type')] = $logs['amount_type'];
					//$transLogs[$index][$translate->translate('Currency')] = $logs['transaction_currency'];
					$transLogs[$index]['Amount'] = $currency->setCurrency($logs['transaction_currency'], $logs['amount']);
					$transLogs[$index]['Balance'] = $currency->setCurrency('INR', $logs['bb_balance'] + $logs['cash_balance']);
					//$transLogs[$index][$translate->translate('Real Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['real_change']);
					//$transLogs[$index][$translate->translate('Bonus Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['bonus_change']);
					$transLogs[$index]['Status'] = $logs['processed'];
					$transLogs[$index]['Date/Time'] = $date->setDate($logs['trans_start_time']);
					$index++;
				}
				$paginatorSession->unsetAll();
				return array($paginator, $transLogs);
			}
			return NULL;
	    }
		
		if($download != NULL)
		{
			//echo $query.'<br>';
			/* $query = "Zenfox_Query::create()
	    			->from ('AuditReport ar')
	    			->Where('ar.trans_start_time between ? and ?', array('2008-01-21 00:00:00', '2011-07-27 00:00:00'))
	    			->andWhere('ar.transaction_type = ?','CREDIT_DEPOSITS')
	    			->andWhere('ar.player_id = ?','6')
	    			->andWhereIn('ar.transaction_status',array(PROCESSED,ERROR,STARTED,UNPROCESSED))";*/
			$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query,-1);
		   	$paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
	    	$paginator =  new Zend_Paginator($adapter);
			$paginator->setItemCountPerPage(count($paginator)*10);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber(0);
			$paginatorSession->unsetAll();
			
			//foreach ($paginator as $value)echo $value['trans_start_time'].'<br>';
			//print_r($paginator);//,'data',true,true);
			//exit();
			return $paginator;	
		}
	}

	public function getTransactionByPlayerId($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->select('ar.converted_amount, ar.transaction_type')
					->from('AuditReport ar')
					->where('ar.player_id = ?', $playerId)
					->andWhereIn('ar.transaction_type', array('PLACE_WAGER', 'AWARD_WINNINGS'))
					->andWhere('ar.error = ?', 'NOERROR')
					->andWhere('ar.trans_start_time between ? and ?', array($fromDate, $toDate));
					
		$result = $query->fetchArray();
		$totalWagers = 0;
		$totalWinnings = 0;
		if($result)
		{
			foreach($result as $auditData)
			{
				switch($auditData['transaction_type'])
				{
					case 'PLACE_WAGER':
						$totalWagers += $auditData['converted_amount'];
						break;
						
					case 'AWARD_WINNINGS':
						$totalWinnings += $auditData['converted_amount'];
						break;
				}
			}
		}
		
		return array(
			'totalWagers' => $totalWagers,
			'totalWinnings' => $totalWinnings
		);
	}

	public function checkIfAuditIdPresent($sourceId, $playerId, $csrId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		//print $sourceId.$playerId.$csrId;
	
		$query = Zenfox_Query::create()
				->from('AuditReport t')
				->where('t.player_id = ?', $playerId)
				->andWhere('t.source_id = ?', $sourceId)
				->andWhere('t.csr_id = ?', $csrId)
				->limit(1);
		//	echo $query->getSql();exit();
	
		$array = $query->fetchArray();
			
		if(!$array)
		{
			return false;
		}
		else
		{
			return $array;
		}
	}
	
	public function getRecentTransactionByPlayerId($playerId, $transactionType)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('AuditReport r')
					->where('r.player_id = ?', $playerId)
					->andWhere('r.transaction_type = ?', $transactionType)
					->orderBy('r.trans_end_time desc')
					->limit(1);
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, 'e', true, true);
			return false;
		}
		return $result;
	}



	
public function getTopPlayers($playerIds,$gameFlavour,$transactionType,$fromDate,$toDate,$items)
	{
		
		
		$playerdata = array();
		//echo $gameFlavour;
		if($playerIds)
		{
			$playerIds = explode(",",$playerIds);
		}
    	
    
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		foreach($conns as $conn)
		{
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			if($playerIds)
			{
						
				if($transactionType != "AWARD_WINNINGS" and $transactionType != "PLACE_WAGER")
				{
					$query = Zenfox_Query::create()
					->select('ar.player_id as PlayerId , ar.game_flavour as GameFlavour, ar.transaction_type as TransactionType , sum(ar.amount) as Amount')
					->from('AuditReport ar')
					->where('ar.trans_start_time >= ?', $fromDate)
					->andWhere('ar.trans_end_time <= ?', $toDate)
					->andWhere('ar.transaction_type = ?', $transactionType)
					->andWhere('ar.transaction_status =?',"PROCESSED")
					->andWhereIn('ar.player_id', $playerIds)
					->groupBy('ar.player_id');
				}
				else
				{
					$query = Zenfox_Query::create()
					->select('ar.player_id as PlayerId , ar.game_flavour as GameFlavour , ar.transaction_type as TransactionType , sum(ar.amount) as Amount')
					->from('AuditReport ar')
					->where('ar.trans_start_time >= ?', $fromDate)
					->andWhere('ar.trans_end_time <= ?', $toDate)
					->andWhere('ar.game_flavour = ?', $gameFlavour)
					->andWhere('ar.transaction_type = ?', $transactionType)
					->andWhere('ar.transaction_status =?',"PROCESSED")
					->andWhereIn('ar.player_id', $playerIds)
					->groupBy('ar.player_id');
				}
				
			}
			else
			{
				if($transactionType != "AWARD_WINNINGS" and $transactionType != "PLACE_WAGER")
				{
					$query = Zenfox_Query::create()
					->select('ar.player_id as PlayerId , ar.game_flavour as GameFlavour , ar.transaction_type as TransactionType , sum(ar.amount) as Amount')
					->from('AuditReport ar')
					->where('ar.trans_start_time >= ?', $fromDate)
					->andWhere('ar.trans_end_time <= ?', $toDate)
					->andWhere('ar.transaction_type = ?', $transactionType)
					->andWhere('ar.transaction_status =?',"PROCESSED")
					->groupBy('ar.player_id');
				}
				else
				{
					$query = Zenfox_Query::create()
					->select('ar.player_id as PlayerId , ar.game_flavour as GameFlavour , ar.transaction_type as TransactionType , sum(ar.amount) as Amount')
					->from('AuditReport ar')
					->where('ar.trans_start_time >= ?', $fromDate)
					->andWhere('ar.trans_end_time <= ?', $toDate)
					->andWhere('ar.game_flavour = ?', $gameFlavour)
					->andWhere('ar.transaction_type = ?', $transactionType)
					->andWhere('ar.transaction_status =?',"PROCESSED")
					->groupBy('ar.player_id');
				}
					
			}
			
			$result = $query->fetchArray();

			$playerdata = array_merge($playerdata,$result);
		}
		//Zenfox_Debug::dump($conns);exit;
		$length = count($playerdata);
			
		$index = 0;
		$secondindex =0;
		$thirdindex = 0;
		$accountdetailsobj = new AccountDetail();		
		while($index < $length)
		{
			
			
			$secondindex = $index +1;
				
			while($secondindex < $length)
			{
				
				if($playerdata[$index]["Amount"] < $playerdata[$secondindex]["Amount"])
				{
					$temp = $playerdata[$index];
					$playerdata[$index] = $playerdata[$secondindex];
					$playerdata[$secondindex] = $temp;
				}
				$secondindex++;
			}
			
			if($index  < $items)
			{
				
				$topplayers[$index]["PlayerId"] = $playerdata[$index]["PlayerId"];
				$details = $accountdetailsobj->getDetails($playerdata[$index]["PlayerId"]);
				$topplayers[$index]["Player Name"] = $details["login"]; 
				$topplayers[$index]["GameFlavour"] = $playerdata[$index]["GameFlavour"];
				$topplayers[$index]["TransactionType"] = $playerdata[$index]["TransactionType"];
				$topplayers[$index]["Amount"] = $playerdata[$index]["Amount"];
				
			}
			else
			{
				break;
			}
			
			
				
			$index++;
      		}

                return $topplayers;
        }
}
