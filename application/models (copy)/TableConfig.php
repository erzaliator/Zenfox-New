<?php

/**
 * TableConfig
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class TableConfig extends BaseTableConfig
{
	public function getFilesPathFromId($tableConfigId)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		try
		{
			$result = Doctrine::getTable('TableConfig')->findOneByTableConfigId($tableConfigId);
		}
		catch(Exception $e)
		{
			return false;
		}
		return array(
			'configFile' => $result['config_file'],
			'swfFile' => $result['swf_file']
		);
	}
	
	public function getAllTableConfig()
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('TableConfig tc');
					
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		return $result;
	}
	
	public function getTableConfigDataByFlavour($gameFlavour, $tableConfigId)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('TableConfig tc')
					->where('tc.game_flavour = ?', $gameFlavour)
					->andWhere('tc.table_config_id = ?', $tableConfigId);
					
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		return $result[0];
	}
	
	public function updateTableConfigData($configData)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->update('TableConfig tc')
					->set('tc.config', '?', $configData['config'])
					->set('tc.min_players', '?', $configData['minPlayer'])
					->set('tc.max_players', '?', $configData['maxPlayer'])
					->set('tc.max_spectators', '?', $configData['maxSpectators'])
					->set('tc.amount_type', '?', $configData['amountType'])
					->set('tc.min_bet', '?', $configData['minBet'])
					->set('tc.max_bet', '?', $configData['maxBet'])
					->set('tc.min_active_rooms', '?', $configData['minActiveRoom'])
					->set('tc.increment_rooms', '?', $configData['incrementRooms'])
					->set('tc.max_rooms', '?', $configData['maxRooms'])
					->set('tc.create_rooms', '?', $configData['createRooms'])
					->set('tc.table_name', '?', $configData['tableName'])
					->set('tc.table_description', '?', $configData['tableDescription'])
					->set('tc.status', '?', $configData['status'])
					->where('tc.game_flavour = ?', $configData['gameFlavour'])
					->andWhere('tc.table_config_id = ?', $configData['tableConfigId']);
					
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			print_r($e);
			exit();
		}
	}
	
	public function createTableConfig($configData)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$lastTableConfigId = $this->_getLastTableConfigId($configData['gameFlavour']);
		$tableConfigId = ++$lastTableConfigId;
		
		switch($configData['gameFlavour'])
		{
			case 'Indian_Rummy':
				if($configData['gameType'] == 'SIMPLE')
				{
					$gameType = '$MaxSessionPoints  Syndicate';
				}
				else
				{
					$gameType = '$MaxSessionPoints Syndicate/ Best of $MaxNumOfGames';
				}
				break;
			case 'MPPRummy':
				$gameType = '$AmountPerPoint $Currency per Point';
				break;
		}
		
		$tableConfig = new TableConfig();
		$tableConfig->table_config_id = $tableConfigId;
		$tableConfig->game_flavour = $configData['gameFlavour'];
		$tableConfig->config = $configData['config'];
		$tableConfig->min_players = $configData['minPlayer'];
		$tableConfig->max_players = $configData['maxPlayer'];
		$tableConfig->max_spectators = $configData['maxSpectators'];
		$tableConfig->amount_type = $configData['amountType'];
		$tableConfig->currency = 'INR';
		$tableConfig->min_bet = $configData['minBet'];
		$tableConfig->max_bet = $configData['maxBet'];
		$tableConfig->config_file = 'Config.txt';
		$tableConfig->swf_file = '/games/multi-player/rummy/indian-rummy/';
		$tableConfig->ext_file = 'cefGames.extensions.game.card.rummy.MPPRummyExtension';
		$tableConfig->min_active_rooms = $configData['minActiveRoom'];
		$tableConfig->increment_rooms = $configData['incrementRooms'];
		$tableConfig->max_rooms = $configData['maxRooms'];
		$tableConfig->create_rooms = $configData['createRooms'];
		/**
		 * Setting table name is throwing exception
		 * Doctrine considers table_name field as setTableName
		 */
		//$tableConfig->table_name = $configData['tableName'];
		$tableConfig->table_description = $configData['tableDescription'];
		$tableConfig->game_rules = $configData['gameRules'];
		$tableConfig->game_type = $gameType;
		$tableConfig->status = $configData['status'];
		
		try
		{
			$tableConfig->save();
		}
		catch(Exception $e)
		{
			print_r($e);
			exit();
		}
		
		$latestTableConfigId = $this->_getLastTableConfigId($configData['gameFlavour']);
		$query = Zenfox_Query::create()
					->update('TableConfig tc')
					->set('tc.table_name', '?', $configData['tableName'])
					->where('tc.table_config_id = ?', $latestTableConfigId);
					
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			print_r($e);
			exit();
		}
	}
	
	private function _getLastTableConfigId($gameFlavour)
	{
		$query = Zenfox_Query::create()
					->from('TableConfig tc')
					->where('tc.game_flavour = ?', $gameFlavour)
					->orderBy('tc.table_config_id desc')
					->limit(1);
					
		$result = $query->fetchArray();
		return $result[0]['table_config_id'];
	}

	public function getTableConfigId($amountType = 'FREE', $gameFlavour = NULL)
	{
		/*if(!$gameFlavour)
		{
			$gameFlavours = array('BestOfThree', 'MPPRummy');
			$gameFlavour = $gameFlavours[rand(0, count($gameFlavours) - 1)]; 
		}*/

		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('TableConfig tc')
					->where('tc.game_flavour = ?', $gameFlavour)
					->andWhere('tc.amount_type = ?', $amountType)
					->andWhere('tc.max_players > ?', 2);
		
		$result = $query->fetchArray();
		if($result)
		{
			foreach($result as $configData)
			{
				$tableConfigIds[] = $configData['table_config_id'];
//				$tableConfigIds['game_flavour'][] = $configData['game_flavour'];
				
			}

			return $tableConfigIds;
		}
		return NULL;
	}
}