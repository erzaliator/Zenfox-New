<?php

/**
 * Kyc
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Kyc extends BaseKyc
{
	
	
	public function getkycminidetailsbytype($playerid , $prooftype)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
		
		$query = Zenfox_Query::create()
		->select('k.kyc_document, k.kyc_document_number, k.expiry_date, k.kyc_document_other,k.issuing_authority, k.type, k.status')
		->from('Kyc  k')
		->where('k.player_id  =?',$playerid)
		->andWhere('k.extra1 =?',"ENABLED")
		->andWhere('k.type =?' , $prooftype)
		->orderBy('k.id desc');
		
	try{
		$result = $query->fetchArray();
	}
	catch(Exception $e)
	{
		 echo 'Error!: ' . $e->getMessage();
		 
	}
		return $result[0];
	
	}
	
	public function getkycminidetails($playerid )
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
	
		$query = Zenfox_Query::create()
		->select('k.kyc_document, k.kyc_document_number, k.expiry_date, k.kyc_document_other, k.type, k.status')
		->from('Kyc  k')
		->where('k.player_id  =?',$playerid)
		->andWhere('k.extra1 =?',"ENABLED")
		->orderBy('k.id desc')
		->limit(2);
	
		try{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			echo 'Error!: ' . $e->getMessage();
				
		}
		return $result;
	
	}
	
	public function getkycdetails($playerid)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
		
		$query = Zenfox_Query::create()
				->from('Kyc  k')
				->where('k.player_id  =?',$playerid)
				->andWhere('k.extra1 =?' , "ENABLED")
				->orderBy('k.id asc');
		
		$result = $query->fetchArray();
		
		return $result;
		
		
	}
	
	public function getallkycdetails()
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		$index = 0;
		foreach($conns as $conn)
		{
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			$query = Zenfox_Query::create()
			->select('k.player_id, k.status, k.type, k.kyc_document, k.kyc_document_other, k.time')
			->from('Kyc  k')
			->andWhere('k.extra1 =?' , "ENABLED")
			->andWhere('k.status =?', "PENDING")
			->orderBy('k.time desc');
			//->orderBy('k.id asc');
			
			$result[$index] = $query->fetchArray();
			$index++;
			
		}
		return $result;
	}
	
	
	
	public function getmaxid($playerid)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
	
		$query = Zenfox_Query::create()
		->select ('max(k.id)')
		->from('Kyc  k')
		->where('k.player_id  =?',$playerid);
	
		$result = $query->fetchArray();
		
		return $result[0]["max"];
	
	}
	
	public function deleteproofs($playerid)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
		
		$query = Zenfox_Query::create()
		->delete('Kyc  k')
		->where('k.player_id  =?',$playerid);
		
		$query->execute();
		
	}
	
	public function disableproofs($playerid,$type)
	{
		
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
		
		$query = Zenfox_Query::create()
		->update('kyc k')
		->set('k.extra1','?',"DISABLED")
		->where('k.player_id  =?',$playerid)
		->andwhere('k.type = ?' , $type);
		
		$query->execute();
	}
	
	public function insertidproof($playerid,$type,$idproof,$idproofnumber,$idproofexpiry,$idproofauthority,$otherproof,$status = "PENDING")
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		$partition  = Doctrine_Manager::getInstance()->setCurrentConnection($conns);
			
		$datetime = new Zend_Date();
		$starttime = $datetime->get(Zend_Date::W3C);
		
		$this->player_id = $playerid;
		$this->type = $type;
		$this->kyc_document = $idproof;
		$this->kyc_document_number = $idproofnumber;
		$this->expiry_date = $idproofexpiry;
		$this->issuing_authority = $idproofauthority;
		$this->status = $status;
		$this->kyc_document_other = $otherproof;
		$this->extra1 = "ENABLED";
		$this->time = $starttime;
		
		$this->save($partition);
	
	}
	
	public function updateproof($playerid,$type,$idproof,$idproofnumber,$idproofexpiry,$idproofauthority,$status)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections($playerid);
		 Doctrine_Manager::getInstance()->setCurrentConnection($conns);
	
		$query = Zenfox_Query::create()
		->update('kyc k')
		->set('k.kyc_document_number','?',$idproofnumber)
		->set('k.expiry_date','?',$idproofexpiry)
		->set('k.issuing_authority','?',$idproofauthority)
		->set('k.status','?',$status)
		->where('k.player_id  =?',$playerid)
		->andwhere('k.type = ?' , $type);
		
		$query->execute();
	
	
	}
	
	public function getplayerids($doc_no)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		
		 $index =0;
		 $result = array();
		 foreach($conns as $conn)
		 {
		 	 Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		 	 
		 	 	 $query = Zenfox_Query::create()
					->select ('k.player_id')
					->from('Kyc  k')
					->where('k.kyc_document_number  =?',$doc_no);
					
					$result[$index] = $query->fetchArray();
		 	
		 	 $index++;
		 }
		 
		 return array_merge($result[0],$result[1]);
	}
	
	
	
}