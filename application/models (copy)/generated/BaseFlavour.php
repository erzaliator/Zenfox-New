<?php

/**
 * BaseFlavour
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $game_flavour
 * @property string $main_table
 * @property string $running_table
 * @property string $game_log_table
 * @property string $pjp_link
 * @property Doctrine_Collection $slots
 * @property Doctrine_Collection $pjp_machines
 * @property Doctrine_Collection $gamelog_sessions
 * @property Doctrine_Collection $running_roulettes
 * @property Doctrine_Collection $roulettes
 * @property Doctrine_Collection $bingo_gamelogs
 * @property Doctrine_Collection $bingo_games
 * @property Doctrine_Collection $pjp_winners
 * @property Doctrine_Collection $kenoes
 * @property Doctrine_Collection $running_kenoes
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseFlavour extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('flavours');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('description', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('game_flavour', 'string', 45, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('main_table', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('running_table', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('game_log_table', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('pjp_link', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasMany('Slot as slots', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('PjpMachine as pjp_machines', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('GamelogSession as gamelog_sessions', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('RunningRoulette as running_roulettes', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('Roulette as roulettes', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('BingoGamelog as bingo_gamelogs', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('BingoGame as bingo_games', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('PjpWinner as pjp_winners', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('Keno as kenoes', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasMany('RunningKeno as running_kenoes', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));
    }
}