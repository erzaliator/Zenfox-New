<?php

/**
 * BaseAccount
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $player_id
 * @property string $login
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $sex
 * @property date $dateofbirth
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $country
 * @property string $pin
 * @property string $phone
 * @property string $question
 * @property string $hint
 * @property string $answer
 * @property integer $newsletter
 * @property integer $promotions
 * @property integer $black_list
 * @property Country $Country
 * @property Doctrine_Collection $account_detail
 * @property Doctrine_Collection $no_payments
 * @property Doctrine_Collection $journals
 * @property Doctrine_Collection $gamelog_roulettes
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */

abstract class BaseBonusCoupons extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('bonus_coupons');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'notnull' => true,
        	 'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('coupon_code', 'string', 45, array(
             'type' => 'string',
             'unique' => true,
          	 'length' => '45',
             ));
        $this->hasColumn('code_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'FREE_BONUS',
              1 => 'DEPOSIT_BONUS',
             ),
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             ));    
        $this->hasColumn('amount_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'BONUS',
              1 => 'REAL',
              2 => 'BOTH',
             ),
             ));
        $this->hasColumn('currency', 'string', 3, array(
             'type' => 'string',
          	 'length' => '3',
             ));
        $this->hasColumn('percent_bbs', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('percent_real', 'float', null, array(
             'type' => 'float',
             ));     
	    $this->hasColumn('expiry_time', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('expiry_rule', 'string', 255, array(
             'type' => 'string',
          	 'length' => '255',
             ));    
        $this->hasColumn('max_redeem_times', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('max_real', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('max_bbs', 'float', null, array(
             'type' => 'float',
             ));
		$this->hasColumn('redeemed_times', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
			 'default' => 0,
             ));
        $this->hasColumn('total_redeemed_real', 'float', null, array(
             'type' => 'float',
        	 'default' => 0,
             ));
        $this->hasColumn('total_redeemed_bbs', 'float', null, array(
             'type' => 'float',
        	 'default' => 0,
             ));
        $this->hasColumn('remaining_redeems', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));     
        $this->hasColumn('player_id', 'string', 255, array(
             'type' => 'string',
          	 'length' => '255',
             ));
        $this->hasColumn('frontend_id', 'string', 255, array(
             'type' => 'string',
          	 'length' => '255',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'VALID',
              1 => 'INVALID',
              2 => 'REDEEMED',
              3 => 'EXPIRED',
             ),
             ));     
    }
}