<?php

/**
 * TourneyRegistrations
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class TourneyRegistrations extends BaseTourneyRegistrations
{
	public function registerPlayer($tournamentId =1, $playerId, $frontendId, $tournamentChips, $extra = NULL)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		$date = new Zend_Date();
		$date->setTimezone('Asia/Calcutta');
		$currentTime = $date->get(Zend_Date::W3C);
		
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		$query = Zenfox_Query::create()
			->from('TourneyRegistrations tr')
			->where('tr.player_id = ?', $playerId)
			->andWhere('tr.id = ?', $tournamentId);
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, "Exception");
			return 0;
		}
		
		if(sizeof($result) > 0)
		{
			if($result[0]['extra'] != $extra)
			{
				$query = Zenfox_Query::create()
							->update('TourneyRegistrations tr')
							->set('tr.extra', '?', $extra)
							->set('tr.registration_time', '?', $currentTime)
							->where('tr.player_id = ?', $playerId)
							->andWhere('tr.id = ?', $tournamentId);
				try
				{
					$query->execute();
					$data['playerId'] = $playerId;
					$data['variableName'] = 'tournamentChips';
					$data['variableValue'] = $tournamentChips;
						
					$accountVariable = new AccountVariable();
					$accountVariable->insert($data);
				}
				catch(Exception $e)
				{
					return 0;
				}
				return 1;
			}
			else
			{
				return 2;
			}
		}

		$tourneyRegistration = new TourneyRegistrations();
		$tourneyRegistration->id = $tournamentId;
		$tourneyRegistration->player_id = $playerId;
		$tourneyRegistration->frontend_id = $frontendId;
		$tourneyRegistration->registration_time = $currentTime;
	
		try
		{
			$tourneyRegistration->save();
			
			/*
			 * Give him the initial tournament chips required!
			 * 
			 * FIXME:: Remove the hardcoding!! - Blame Ravi!
			 */
		
			$data['playerId'] = $playerId;
			$data['variableName'] = 'tournamentChips';
			$data['variableValue'] = $tournamentChips;
			
			$accountVariable = new AccountVariable();
			$accountVariable->insert($data);
		}
		catch(Exception $e)
		{
			return 0;
		}
		return 1;
	}
	
	
	
	
}