<?php

/**
 * BitcoinsTransactions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */

require_once 'jsonrpcphp/includes/jsonRPCClient.php';
class BitcoinsTransactions extends BaseBitcoinsTransactions
{
	public function addRecords($data)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($data['playerId']);
		$partition = Doctrine_Manager::getInstance()->getConnection($conn);
		
		$date = new Zend_Date();
		$currentTime = $date->get(Zend_Date::W3C);
		
		$bitcoinAddress = $this->getBitcoinAddress($data['login']);
		$bitcoinAmount = $this->getCurrentBitcoinAmount();
		$userCurrencyAmount = $this->getUserCurrencyAmount($data['userCurrency']);
		
		$this->player_id = $data['playerId'];
		$this->no_of_bitcoins = $data['bitcoins'];
		$this->bitcoin_address = $bitcoinAddress;
		$this->account_holder_name = $data['login'];
		$this->user_currency = $data['userCurrency'];
		$this->bitcoin_currency_amount = $bitcoinAmount;
		$this->user_currency_amount = $userCurrencyAmount;
		$this->final_amount = $data['amount'];
		$this->request_time = $currentTime;
		$this->noof_confirm_requests = 5;

		try
		{
			$this->save($partition);
		}
		catch(Exception $e)
		{
			Zenfox_Debug::dump($e, 'exception', true, true);
		}
	}
	
	public function getBitcoinAddress($login)
	{
		$bitcoin = new jsonRPCClient('http://nikhil:root123@127.0.0.1:8332/');
		$address = $bitcoin->getaccountaddress($login);
		return $address;
	}
	
	public function getCurrentBitcoinAmount()
	{
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, 'http://bitcoincharts.com/t/weighted_prices.json');
		curl_setopt($ch, CURLOPT_HEADER, 1);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		$file_contents = strstr(curl_exec($ch),'{'); // get everything starting from first curly bracket
		curl_close($ch);
		$bitCoinsValue = Zend_Json::decode($file_contents);
		
		$amount = $bitCoinsValue['USD']['24h'];
		return $amount;
	}
	
	public function getUserCurrencyAmount($userCurrency, $fromCurrency = 'USD')
	{
		$amount = urlencode(1);
		$fromCurrency = urlencode($fromCurrency);
		$toCurrency = urlencode($userCurrency);
		
		$url = "http://www.google.com/finance/converter?a=$userAmount&from=$fromCurrency&to=$toCurrency";
		
		$ch = curl_init();
		$timeout = 0;
		curl_setopt ($ch, CURLOPT_URL, $url);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
		
		curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
		$rawdata = curl_exec($ch);
		curl_close($ch);
		$data = explode('bld>', $rawdata);
		$data = explode($toCurrency, $data[1]);
		
		return round($data[0], 2);
	}
}