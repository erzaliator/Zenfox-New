<?php

/**
 * AffiliateSchemeDef
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class AffiliateSchemeDef extends BaseAffiliateSchemeDef
{
	public function createSchemeDef($data)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('AffiliateScheme a')					
					->orderBy('a.id DESC');

		$result = $query->fetchArray();		
		$this->saveSlab(1,$result[0]['id'],$data['scheme']);
	}
	
	public function getAffiliateSchemeDef($id)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('AffiliateSchemeDef a')
					->where('a.scheme_id = ?' , $id)
					->orderBy('a.slab_id ASC');
		
		//return $query->fetchArray();
		$language = Zend_Registry::get('Zend_Locale');
		$session = new Zenfox_Auth_Storage_Session();
		$storedData = $session->read();
		if($storedData)
		{
			$language = $storedData['authDetails'][0]['language'];
		}
		$result = $query->fetchArray();
		$index = 0;
		$finalResult = array();
		foreach($result as $data)
		{
			//$finalResult[$index]['Scheme Id'] = $data['scheme_id'];
			$finalResult[$index]['Levels'] = 'Level-' . $data['slab_id'];
			$finalResult[$index]['Scheme Type'] = $data['scheme_type'];
			$currency = new Zend_Currency(null, $language);
			switch($data['scheme_type'])
			{
				case 'RS':
					$min = $currency->setValue($data['min']);
					$currency = new Zend_Currency(null, $language);
					$max = $currency->setValue($data['max']);
					$factor = $data['factor'] . '%';
					break;
				case 'CPA':
					$factor = $currency->setValue($data['factor']);
					$min = $data['min'];
					$max = $data['max'];
			}
			$finalResult[$index]['Min'] = $min;
			$finalResult[$index]['Max'] = $max;
			$finalResult[$index]['Factor'] = $factor;
			/*$finalResult[$index]['Prerequisite'] = $data['prerequisite'];
			$finalResult[$index]['Prerequisite Count'] = $data['prerequisite_count'];
			$finalResult[$index]['Expiry Time'] = $data['expiry_time'];
			$finalResult[$index]['Rule Met'] = $data['rule_met'];
			$finalResult[$index]['Extended Forumla'] = $data['extended_forumla'];*/
			$index++;
		}
		return $finalResult;
	}
	
	public function getLoyalty($id,$type,$earnings,$acquisitions)
	{			
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);		
		if($type == 'RS')
		{						
			if($earnings == 0)
			{				
				return 1;
			}
			
			$query = Zenfox_Query::create()
					->from('AffiliateSchemeDef a')
					->where('a.scheme_type = ?' , 'RS')
					->andWhere('a.scheme_id = ?' , $id)
					->andWhere('a.min > ?' , $earnings)
					->andWhere('a.max < ?' , $earnings);	
		}		
		else if($type == 'CPA')
		{			
			if($acquisitions == 0)
			{		
				return 1;
			}
			$query = Zenfox_Query::create()
					->from('AffiliateSchemeDef a')
					->where('a.scheme_type = ?' , 'RS')
					->andWhere('a.scheme_id = ?' , $id)
					->andWhere('a.min > ?' , $acquisitions)
					->andWhere('a.max < ?' , $acquisitions);
		}		
		$result = $query->fetchArray();
		if($result)
		{
			return $result[0]['slab_id'];		
		}
		else
		{
			$query = Zenfox_Query::create()
					->from('AffiliateSchemeDef a')
					->where('a.scheme_type = ?' , 'RS')
					->andWhere('a.scheme_id = ?' , $id)
					->orderBy('a.slab_id DESC');
					
			$result = $query->fetchArray();
			return $result[0]['slab_id'];
		}
	}
	
	public function updateSlab($id,$slabId,$data)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Doctrine_Query::create()
    			->update('AffiliateSchemeDef a')
    			->set('a.min', '?', $data['min'])
    			->set('a.max', '?', $data['max'])
    			->set('a.factor', '?', $data['factor'])
    			->set('a.prerequisite_count', '?', $data['prerequisite'])
    			->where('a.scheme_id = ?', $id)
    			->andWhere('a.slab_id = ?', $slabId);
    	return $query->execute();
		
	}
	
	public function saveSlab($slabId,$id,$schemeType)
    {
    	$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		$partition = Doctrine_Manager::getInstance()->getConnection($conn);
    	
    	$this->scheme_id = $id;
    	$this->slab_id = $slabId;
    	$this->scheme_type = $schemeType;
    	$this->min = 0;
    	$this->max = 0;
    	$this->factor = 0;
    	$this->prerequisite_count = 0;
    	$this->expiry_time = "0000-00-00 00:00:00";
    	$this->rule_met = 'MET';
    	
    	return $this->save($partition);
	}
	
	public function addSlab($id)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
    			->from('AffiliateSchemeDef a')
    			->where('a.scheme_id = ?' , $id)
    			->orderBy('a.slab_id DESC');
    			
    			
    	$data = $query->fetchArray();    	
    	$slabId = $data[0]['slab_id'] + 1;    	
    	$schemeType = $data[0]['scheme_type'];
    	$this->saveSlab($slabId,$id,$schemeType);
	}
    	
	public function deleteSlab($id)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
    			->from('AffiliateSchemeDef a')
    			->where('a.scheme_id = ?' , $id)
    			->orderBy('a.slab_id DESC');
    			
    	$data = $query->fetchArray();    	
    	$slabId = $data[0]['slab_id'];
    		
		$query = Zenfox_Query::create()
					->delete('AffiliateSchemeDef a')
					->where('a.scheme_id = ?',$id)
					->andWhere('a.slab_id = ?' , $slabId);

		return $query->execute();
	}
	
	public function getAllAffiliateSchemes()
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
						->from('AffiliateSchemeDef a');
						
		$result = $query->fetchArray();
		Zenfox_Debug::dump($result, 'result');
	}
    
}