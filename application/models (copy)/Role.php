<?php

/**
 * Role
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class Role extends BaseRole implements Zend_Acl_Role_Interface
{
	public function getRoleId()
	{
		//FIXME:: Ideally this should be <roleType>-<name>
		return $this->name;
	}
	
    public function getParents()
    {
    	$parents = array();
 /*   	$session = new Zend_Auth_Storage_Session();
        $data = $session->read();
        $id = $data['authDetails'][0]['id'];
    	//TODO implement it for csr-id
        if($this->name == 'csr' && $id)
        {
        	$i = 0;
        	$temp = 1;
        	$group_parents = array();
        	$csr_groups = Doctrine::getTable('CsrGmsGroup')->findByCsrId($id);
        	foreach($csr_groups as $group)
        	{
        		$role_name = $group->GmsGroup['name'];
        		$role = Doctrine::getTable('Role')->findOneByName($role_name);
        		$parentId = $role['parent_id'];
        		while($parentId != -1)
        		{
            		$role = Doctrine::getTable('Role')->findOneById($parentId);
            		for($x=0; $x<$i; $x++)
            		{
            			if($parents[$x]['parent_id'] == $role['parent_id'])
            			{
            				$temp = 0;
            				break;
            			}
            		}
            		if($temp == 0)
            			break;
            		$parents[] = $role;
            		$parentId = $role['parent_id'];
            		$i++;
        		}
        	}     	
        }*/
        if(!$this->parent_id)
        {
           	return array();
        }
        $parentId = $this->parent_id;
        while($parentId != -1)
        {
           	$role = Doctrine::getTable('Role')->findOneById($parentId);
           	$parents[] = $role;
           	$parentId = $role['parent_id'];;
        }

        //Need to reverse since we actually put closes in first,
        //so it would be the last in the array
        return array_reverse($parents);
     }
     /**
      * this method gets all the roles
      * @return unknown_type
      */
	public function getRoles()
    {
     	$query = Zenfox_Query::create()
    				->from ('Role r');
    				
    	$result = $query->fetchArray();
    	
    	return $result;
     }
     /**
      * this method gets the role by id
      * @param $id
      * @return unknown_type
      */
     public function getRoleById($id)
     {
     	$role = Doctrine::getTable('Role')->findOneById($id);
     	
     	return array(
					'id' => $role['id'],
					'name' => $role['name'],
					'roleType' => $role['role_type'],
					'parentId' => $role['parent_id'],
					'description' => $role['description']
				);
     }
}