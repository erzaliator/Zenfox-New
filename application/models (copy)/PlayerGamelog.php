<?php

/**
 * PlayerGamelog
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class PlayerGamelog extends BasePlayerGamelog
{	
	public function getTotalGames($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.start_time between ? and ?', array($fromDate, $toDate));
				
		$result = $query->fetchArray();
		$totalGames = 0;
		if($result)
		{
			$totalGames = count($result);
		}
		return $totalGames;
	}
	
	public function getNumberOfWins($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.result = ?', 'Winner')
				->andWhere('pg.start_time between ? and ?', array($fromDate, $toDate));
				
		$result = $query->fetchArray();
		$totalWins = 0;
		if($result)
		{
			$totalWins = count($result);
		}
		return $totalWins;
	}
	
	public function getWinners($offset, $itemsPerPage, $session, $fromDate = NULL, $toDate = NULL)
	{
		if($fromDate)
		{
			if($toDate)
			{
				$query = "Zenfox_Query::create()
						->select('(pg.bonus_winnings + pg.real_winnings) as total, pg.player_id, pg.bonus_winnings, pg.real_winnings')
						->from('PlayerGamelog pg')
						->where('pg.start_time BETWEEN ? AND ?', array('$fromDate', '$toDate'))
						->andWhere('pg.player_id NOT BETWEEN ? AND ?', array(1000, 1490))
						->andWhere('pg.result = ?', 'Winner')
						->andWhere('pg.bonus_winnings > ?', '0')
						->orWhere('pg.real_winnings > ?', '0')
						->orderBy('total DESC')";
			}
			else
			{
				$query = "Zenfox_Query::create()
						->select('(pg.bonus_winnings + pg.real_winnings) as total, player_id')
						->from('PlayerGamelog pg')
						->where('pg.start_time >= ?', '$fromDate'))
						->andWhere('pg.result = ?', 'Winner')
						->andWhere('pg.bonus_winnings > ?', '0')
						->orWhere('pg.real_winnings > ?', '0')
						->orderBy('total DESC')";
			}
		}
		else
		{
			$query = "Zenfox_Query::create()
						->select('(pg.bonus_winnings + pg.real_winnings) as total, player_id')
						->from('PlayerGamelog pg')
						->andWhere('pg.result = ?', 'Winner')
						->andWhere('pg.bonus_winnings > ?', '0')
						->orWhere('pg.real_winnings > ?', '0')
						->orderBy('total DESC')";
		}
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, -1, $session);
    	$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
    	$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsPerPage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset);
		if(!$paginator)
		{
			return false;
		}
		$winnerData = array();
		$index = 0;
		$player = new Player();
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				$playerId = $logs['player_id'];
				$winnerData[$index]['Player Id'] = $playerId;
				$winnerData[$index]['Amount'] = $logs['total'];
				$winnerData[$index]['Player Name'] = $player->getUserName($playerId);
				$winnerData[$index]['Email'] = $player->getEmail($playerId);
				$index++;
			}
			$paginatorSession->unsetAll();
			return array($paginator, $winnerData);
		}
		return null;
	}
	
	public function getGameHistory($offset = NULL, $itemsPerPage = NULL, $session = NULL, $fromDate = NULL, $toDate = NULL, $playerId = NULL, $frontendId = NULL)
	{
		if($playerId)
		{
			return $this->getPlayerGameHistory($playerId, $offset, $itemsPerPage, $session, $fromDate, $toDate);
		}
		if($fromDate)
		{
			if($toDate)
			{
				$query = "Zenfox_Query::create()
						->from('PlayerGamelog pg')
						->where('pg.start_time BETWEEN ? AND ?', array('$fromDate', '$toDate'))
						->andWhere('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))";
			}
			else
			{
				$query = "Zenfox_Query::create()
						->from('PlayerGamelog pg')
						->where('pg.start_time >= ?', '$fromDate')
						->andWhere('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))";
			}
		}
		else
		{
			$query = "Zenfox_Query::create()
					->from('PlayerGamelog pg')
					->where('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))";
		}
		if($frontendId)
		{
			$query .= "->andWhereIn('pg.frontend_id', array('$frontendId'))";
		}
		
		$query .= "->groupBy('pg.player_id')->orderBy('pg.start_time desc')";

		$finalGameHistory = array();
		if(!$offset && !$itemsPerPage)
		{
			$query = $query . ";";
			$str = "";
			$connections = Zenfox_Partition::getInstance()->getConnections(-1);
			foreach($connections as $conn)
			{
				$index = count($finalGameHistory);
				Doctrine_Manager::getInstance()->setCurrentConnection($conn);
				eval ( "\$str=" . $query );
				try
				{
					$gameHistory = $str->fetchArray();
				}
				catch(Exception $e)
				{
					Zenfox_Debug::dump($e, 'exception', true, true);
				}
				if($gameHistory)
				{
					$finalGameHistory = $this->_generateHistoryArray($finalGameHistory, $gameHistory, $index, $fromDate, $toDate);
				}
			}
			return $finalGameHistory;
		}
		else
		{
			$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, -1, $session);
		    $paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
		    $paginator =  new Zend_Paginator($adapter);
			$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
	
			if(!$paginator->getTotalItemCount())
			{
				return false;
			}
			$index = count($finalGameHistory);
			$finalGameHistory = $this->_generateHistoryArray($finalGameHistory, $paginator, $index, $fromDate, $toDate);
			$paginatorSession->unsetAll();
			return array($paginator, $finalGameHistory);
		}
	}
	
	private function _generateHistoryArray($finalGameHistory, $allGamesHistory, $index, $fromDate = NULL, $toDate = NULL)
	{
		foreach($allGamesHistory as $logs)
		{
			$conn = Zenfox_Partition::getInstance()->getConnections($logs['player_id']);
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			if($fromDate)
			{
				if($toDate)
				{
					$query = Zenfox_Query::create()
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $logs['player_id'])
							->andWhere('pg.start_time BETWEEN ? AND ?', array($fromDate, $toDate))
							->groupBy('pg.session_id');
				}
				else
				{
					$query = Zenfox_Query::create()
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $logs['player_id'])
							->andWhere('pg.start_time >= ?', $fromDate)
							->groupBy('pg.session_id');
				}
			}
			else
			{
				$query = Zenfox_Query::create()
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $logs['player_id'])
							->groupBy('pg.session_id');							
			}
			
			$gameHistory = $query->fetchArray();
			$totalNoOfGames = count($gameHistory);
			$gamesWin = 0;
			foreach($gameHistory as $historyData)
			{
				switch($historyData['game_flavour'])
				{
					case 'FLRummy':
					case 'Indian_Rummy':
						$query = Zenfox_Query::create()
								->from('PlayerGamelog pg')
								->where('pg.player_id = ?', $logs['player_id'])
								->andWhere('pg.session_id = ?', $historyData['session_id'])
								->andWhere('pg.game_flavour = ?', $historyData['game_flavour'])
								->andWhere('pg.real_winnings > ? or pg.bonus_winnings > ? or pg.free_winnings > ?', array(0,0,0));
							
						$gameResult = $query->fetchArray();
						if($gameResult)
						{
							$gamesWin++;
						}
						break;
					case 'MPPRummy':
						$query = Zenfox_Query::create()
								->from('PlayerGamelog pg')
								->where('pg.player_id = ?', $logs['player_id'])
								->andWhere('pg.session_id = ?', $historyData['session_id'])
								->andWhere('pg.game_flavour = ?', $historyData['game_flavour']);
							
						$gamesResult = $query->fetchArray();
						foreach($gamesResult as $gameResult)
						{
							if($gameResult['result'])
							{
								$gamesWin++;
							}
						}
						$totalNoOfGames += count($gamesResult) - 1; 
						break;
				}
			}
			$finalGameHistory[$index]['Player Id'] = $logs['player_id'];
			$finalGameHistory[$index]['Total Games'] = $totalNoOfGames;
			$finalGameHistory[$index]['Won'] = $gamesWin;
			$index++;
		}
		return $finalGameHistory;
	}
	
	public function getPlayerGameHistory($playerId, $offset = NULL, $itemsPerPage = NULL, $session = NULL, $fromDate = NULL, $toDate = NULL)
	{
		if($fromDate)
		{
			if($toDate)
			{
				$query = "Zenfox_Query::create()
						->from('PlayerGamelog pg')
						->where('pg.start_time BETWEEN ? AND ?', array('$fromDate', '$toDate'))
						->andWhere('pg.player_id = ?', $playerId)
						->groupBy('pg.session_id')
						->orderBy('pg.start_time desc')";
			}
			else
			{
				$query = "Zenfox_Query::create()
						->from('PlayerGamelog pg')
						->where('pg.start_time >= ?', '$fromDate')
						->andWhere('pg.player_id = ?', $playerId)
						->groupBy('pg.session_id')
						->orderBy('pg.start_time desc')";
			}
		}
		else
		{
			$query = "Zenfox_Query::create()
					->from('PlayerGamelog pg')
					->andWhere('pg.player_id = ?', $playerId)
					->groupBy('pg.session_id')
					->orderBy('pg.start_time desc')";
		}
		$finalGameHistory = array();
		if(!$offset && !$itemsPerPage)
		{
			$query = $query . ";";
			$str = "";
			$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
			$index = count($finalGameHistory);
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			eval ( "\$str=" . $query );
			try
			{
				$gameHistory = $str->fetchArray();
			}
			catch(Exception $e)
			{
				Zenfox_Debug::dump($e, 'exception', true, true);
			}
			if($gameHistory)
			{
				$finalGameHistory = $this->_generatePlayerHistoryArray($playerId, $finalGameHistory, $gameHistory, $index);
			}
			return $finalGameHistory[0];
		}
		else
		{
			$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, $playerId, $session);
		    $paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
		    $paginator =  new Zend_Paginator($adapter);
			$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
	
			if(!$paginator->getTotalItemCount())
			{
				return false;
			}
			$totalCount = $paginator->getTotalItemCount();
			$index = count($finalGameHistory);
			$finalGameHistory = $this->_generatePlayerHistoryArray($playerId, $finalGameHistory, $paginator, $index, $totalCount);
			$paginatorSession->unsetAll();
			return array($paginator, $finalGameHistory[0], $finalGameHistory[1]);
		}
	}
	
	private function _generatePlayerHistoryArray($playerId, $gameHistory, $allGamesHistory, $index, $totalCount = NULL)
	{
		foreach($allGamesHistory as $logs)
		{
			switch($logs['amount_type'])
			{
				case 'REAL':
				case 'BOTH':
					$amount = round($logs['real_bet'], 2);
					$gameType = 'REAL';
					break;
				case 'BONUS':
					$amount = round($logs['bonus_bet'], 2);
					$gameType = 'BONUS';
					break;
				case 'FREE':
					$amount = round($logs['free_bet'], 2);
					$gameType = 'FREE';
					break;
			}
			switch($logs['game_flavour'])
			{
				case 'FLRummy':
				case 'Indian_Rummy':
				case 'BestOfThreeRummy':
					$query = Zenfox_Query::create()
								->from('PlayerGamelog pg')
								->where('pg.player_id = ?', $playerId)
								->andWhere('pg.session_id = ?', $logs['session_id'])
								->andWhere('pg.game_flavour = ?', $logs['game_flavour'])
								->orderBy('pg.game_id desc')
								->limit(1);
					
					$gameResult = $query->fetchArray();
					$result = $gameResult[0]['result'];
					
					$gameHistory[$index]['Player Id'] = $playerId;
					$gameHistory[$index]['Game Type'] = $gameType;
					$gameHistory[$index]['Flavour'] = $logs['game_flavour'];
					$gameHistory[$index]['Result'] = $result;
					$gameHistory[$index]['Wagered Amount'] = $amount;
					$gameHistory[$index]['Time'] = $logs['start_time'];
					$index++;
					break;
				case 'MPPRummy':
					$query = Zenfox_Query::create()
								->from('PlayerGamelog pg')
								->where('pg.player_id = ?', $playerId)
								->andWhere('pg.session_id = ?', $logs['session_id'])
								->andWhere('pg.game_flavour = ?', $logs['game_flavour']);
							
					$gamesResult = $query->fetchArray();
					$totalCount += count($gamesResult) - 1;
					foreach($gamesResult as $gameResult)
					{
						switch($gameType)
						{
							case 'REAL':
							case 'BOTHREAL':
								$amount = round($gameResult['real_bet'], 2);
								break;
							case 'BONUS':
								$amount = round($gameResult['bonus_bet'], 2);
								break;
							case 'FREE':
								$amount = round($gameResult['free_bet'], 2);
								break;
						}
						$result = $gameResult['result'];
						$gameHistory[$index]['Player Id'] = $playerId;
						$gameHistory[$index]['Game Type'] = $gameType;
						$gameHistory[$index]['Flavour'] = $logs['game_flavour'];
						$gameHistory[$index]['Result'] = $result;
						$gameHistory[$index]['Wagered Amount'] = $amount;
						$gameHistory[$index]['Time'] = $logs['start_time'];
						$index++;
					}
					break;
			}
		}
		return array($gameHistory, $totalCount);
	}
	
	public function getRegularPlayers($offset = NULL, $itemsPerPage = NULL, $session = NULL, $fromDate = NULL, $toDate = NULL)
	{
		if($fromDate)
		{
			if($toDate)
			{
				$query = "Zenfox_Query::create()
							->from('PlayerGamelog pg')
							->where('pg.start_time BETWEEN ? AND ?', array('$fromDate', '$toDate'))
							->andWhere('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))
							->groupBy('pg.player_id')
							->orderBy('pg.start_time desc')";
			}
			else
			{
				$query = "Zenfox_Query::create()
							->from('PlayerGamelog pg')
							->where('pg.start_time >= ?', '$fromDate')
							->andWhere('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))
							->groupBy('pg.player_id')
							->orderBy('pg.start_time desc')";
			}
		}
		else
		{
			$query = "Zenfox_Query::create()
						->from('PlayerGamelog pg')
						->where('pg.player_id NOT BETWEEN ? AND ?', array(1000,1490))
						->groupBy('pg.player_id')
						->orderBy('pg.start_time desc')";
		}
	
		$finalGameHistory = array();
		if(!$offset && !$itemsPerPage)
		{
			$query = $query . ";";
			$str = "";
			$connections = Zenfox_Partition::getInstance()->getConnections(-1);
			foreach($connections as $conn)
			{
				$index = count($finalGameHistory);
				Doctrine_Manager::getInstance()->setCurrentConnection($conn);
				eval ( "\$str=" . $query );
				try
				{
					$gameHistory = $str->fetchArray();
				}
				catch(Exception $e)
				{
					Zenfox_Debug::dump($e, 'exception', true, true);
				}
				if($gameHistory)
				{
					$finalGameHistory = $this->_regularPlayersArray($finalGameHistory, $gameHistory, $index, $fromDate, $toDate);
				}
			}
			return $finalGameHistory;
		}
		else
		{
			$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, -1, $session);
			$paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
			$paginator =  new Zend_Paginator($adapter);
			$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
	
			if(!$paginator->getTotalItemCount())
			{
				return false;
			}
			$index = count($finalGameHistory);
			$finalGameHistory = $this->_generateHistoryArray($finalGameHistory, $paginator, $index, $fromDate, $toDate);
			$paginatorSession->unsetAll();
			return array($paginator, $finalGameHistory);
		}
	}
	
	private function _regularPlayersArray($finalGameHistory, $allGamesHistory, $index, $fromDate = NULL, $toDate = NULL)
	{
		foreach($allGamesHistory as $logs)
		{
			$conn = Zenfox_Partition::getInstance()->getConnections($logs['player_id']);
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
				
			$query = Zenfox_Query::create()
						->from('AccountDetail a')
						->where('a.player_id = ?', $logs['player_id']);
			$playerDetails = $query->fetchArray();
			$finalGameHistory[$index]['Player Id'] = $logs['player_id'];
			$finalGameHistory[$index]['Won'] = $gamesWin;
			$index++;
		}
		return $finalGameHistory;
	}
	
	public function getPlayerGamelogDetails($playerId, $itemsPerPage, $offset = 0, $fromDateTime = NULL, $toDateTime = NULL)
	{
		$allResults = array();
	
		$query = "Zenfox_Query::create()
		->from('PlayerGamelog pg')
		->where('pg.player_id = ?', '$playerId')
		->andWhere('pg.start_time BETWEEN ? AND ?', array('$fromDateTime', '$toDateTime'))
		->orderBy('pg.start_time desc')";
	
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, $playerId);
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsPerPage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset);
		$translate = Zend_Registry::get('Zend_Translate');
		$date = new Zenfox_Date();
		$currency = new Zenfox_Currency();
		$playerGameLogs = array();
		$index = 0;
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				$playerGameLogs[$index][$translate->translate('Gamelog Id')] = $logs['session_id'] . '-' . $logs['game_id'] . '-' . $logs['game_flavour'];
				$playerGameLogs[$index][$translate->translate('Currency')] = $logs['currency'];
				$playerGameLogs[$index][$translate->translate('Real Bet Amount')] = $currency->setCurrency($logs['currency'], $logs['real_bet']);
				$playerGameLogs[$index][$translate->translate('Bonus Bet Amount')] = $currency->setCurrency($logs['currency'], $logs['bonus_bet']);
				$playerGameLogs[$index][$translate->translate('Real Win Amount')] = $currency->setCurrency($logs['currency'], $logs['real_winnings']);
				$playerGameLogs[$index][$translate->translate('Bonus Win Amount')] = $currency->setCurrency($logs['currency'], $logs['bonus_winnings']);
				$playerGameLogs[$index][$translate->translate('Date & Time')] = $date->setDate($logs['start_time']);
				$playerGameLogs[$index][$translate->translate('Outcome')] = '';
				$index++;
			}
			$paginatorSession->unsetAll();
			return array($paginator, $playerGameLogs);
		}
	
		return NULL;
	}
	
	public function getplayergamesplayedcount($playerid , $gameflavour , $fromDateTime , $toDateTime ,   $counttype)
	{
	
		$conn = Zenfox_Partition::getInstance()->getConnections($playerid);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		$result = array();
		if($counttype == "game")
		{
			$queryfree = Zenfox_Query::create()
							->select('count(pg.player_id),pg.game_flavour')
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $playerid)
							->andWhere('pg.amount_type = ?', "FREE")
							->andWhere('pg.start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
							->andWhereIn("pg.game_flavour",$gameflavour)
							->groupBy('pg.game_flavour');
			
			$result["FREE"] = $queryfree->fetchArray();
			
			
			$queryreal = Zenfox_Query::create()
							->select('count(pg.player_id),pg.game_flavour')
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $playerid)
							->andWhere('pg.amount_type != ?', "FREE")
							->andWhere('pg.start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
							->andWhereIn("pg.game_flavour",$gameflavour)
							->groupBy('pg.game_flavour');
			
			$result["REAL"] = $queryreal->fetchArray();
		}
		else 
		{
			$queryfree = Zenfox_Query::create()
							->select('count(distinct(pg.session_id)),pg.game_flavour')
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $playerid)
							->andWhere('pg.amount_type = ?', "FREE")
							->andWhere('pg.start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
							->andWhereIn("pg.game_flavour",$gameflavour)
							->groupBy('pg.game_flavour');
			
			$result["FREE"] = $queryfree->fetchArray();
			
			$queryreal = Zenfox_Query::create()
							->select('count(distinct(pg.session_id)),pg.game_flavour')
							->from('PlayerGamelog pg')
							->where('pg.player_id = ?', $playerid)
							->andWhere('pg.amount_type != ?', "FREE")
							->andWhere('pg.start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
							->andWhereIn("pg.game_flavour",$gameflavour)
							->groupBy('pg.game_flavour');
			
			$result["REAL"] = $queryreal->fetchArray();
		}
		
		return $result;
	}
	
	public function getGamesplayed($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->select('pg.session_id,pg.game_flavour,pg.game_id,pg.amount_type')
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.start_time between ? and ?', array($fromDate, $toDate));
		
				try
				{
					$result = $query->fetchArray();
				}
				catch(Exception $e)
				{
					Zenfox_Debug::dump($e, 'exception', true, true);
				}
		
		return $result;
	}
	
	public function getrealmoneySessionsplayed($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->select('distinct(pg.session_id) as sessionid ')
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.amount_type != ?' , "FREE")
				->andWhere('pg.start_time  > ?', $fromDate)
				->andWhere('pg.start_time  <= ?', $toDate);
				
		$result = $query->fetchArray();
		
		$count = count($result);
		$index = 0;
		while($index < $count)
		{
			$sessions[$index] = $result[$index]["sessionid"];
			$index++; 
		}
		
		return $sessions;
	}
	
	public function getflavourwiserealmoneyGames($playerId, $fromDate, $toDate)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->select('distinct((pg.game_flavour)) as gameflavour')
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.amount_type != ?' , "FREE")
				->andWhere('pg.start_time between ? and ?', array($fromDate, $toDate));
				
				
		$gameflavours = $query->fetchArray();
		
		$length = count($gameflavours);
		$index =0;
		while($index < $length)
		{
			$query = Zenfox_Query::create()
				->select('pg.session_id , pg.game_id , pg.game_flavour')
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.amount_type != ?' , "FREE")
				->andWhere('pg.start_time between ? and ?', array($fromDate, $toDate))
				->andWhere('pg.game_flavour =?' , $gameflavours[$index]['gameflavour']);
				
				
				$result[$index] = $query->fetchArray();
				
			$index++;
		}
		
		return $result;
	}
	
	public function getsessionplayersdetails($sessionId)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		
			$index=0;
			foreach($conns as $conn)
			{
				Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
				$query = Zenfox_Query::create()
				->select('pg.player_id, pg.real_bet, pg.bonus_bet, pg.real_winnings, pg.bonus_winnings, pg.result ')
				->from('PlayerGamelog pg')
				->whereIn('pg.session_id ' , $sessionId)
				->andWhere('pg.amount_type !=?' , "FREE");
				
				$result[$index] = $query->fetchArray();
				$index++;
			}
		
			$realplayers = array_merge($result[0],$result[1]);
			return $realplayers;
	}
	
	public function getlasttimegameplayed($playerId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->select('pg.start_time')
				->from('PlayerGamelog pg')
				->where('pg.player_id = ?', $playerId)
				->andWhere('pg.amount_type != ?' , "FREE")
				->orderBy('pg.start_time desc')
				->limit(1);
				
			try
			{
				$result = $query->fetcharray();
				
			}
			catch(Exception $e)
			{
				return false;
			}
			
			//Zenfox_Debug::dump($result);exit;
			
			return $result[0]["start_time"];
		
	}
	
	public function getrummyLeaderboard($playerIds,$starttime,$endtime)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		
			$index=0;
			foreach($conns as $conn)
			{
				Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
				$query = Zenfox_Query::create()
				->select('pg.player_id as playerId, count(distinct(pg.session_id))*10 as Points ')
				->from('PlayerGamelog pg')
				->whereIn('pg.player_id ' , $playerIds)
				->andWhere('pg.start_time >=?' , $starttime)
				->andWhere('pg.start_time <=?' , $endtime)
				->groupBy('pg.player_id')
				->limit(10);
				
				$result[$index] = $query->fetchArray();
				//Zenfox_Debug::dump($result[$index]);
				$index++;
			}
		
			
			$playerdata = array_merge($result[0],$result[1]);
			$accountdetailsobj = new AccountDetail();
			
			$length = count($playerdata);
			
						$index = 0;
						$secondindex =0;
						$thirdindex = 0;
						
						while($index < $length)
						{
							$secondindex = $index +1;
				
							while($secondindex < $length)
							{
								if($playerdata[$index]["Points"] < $playerdata[$secondindex]["Points"])
								{
									$temp = $playerdata[$index];
									$playerdata[$index] = $playerdata[$secondindex];
									$playerdata[$secondindex] = $temp;
								}
								$secondindex++;
							}
			
							if($index  < 10)
							{
				
								$details = $accountdetailsobj->getDetails($playerdata[$index]["playerId"]) ;
								$leaderboarddata[$thirdindex]["Player Name"] = $details["login"]; 
										
								$leaderboarddata[$thirdindex]["Points"] = $playerdata[$index]["Points"];
									$thirdindex++;
							}
							else
							{
								break;
							}
							$index++;
						}
						
			//Zenfox_Debug::dump($leaderboarddata);			
			return $leaderboarddata;
	}
	
}
