<?php

/**
 * Resource
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class Resource extends BaseResource implements Zend_Acl_Resource_Interface
{
/*    public function getId()
    {
        return $this->_id;
    }

    public function getName()
    {
        return $this->_name;
    }

    public function getParentId()
    {
        return $this->_parentId;
    }
*/
    /**
     * Return parent resources, closest parent as last
     * @return array
     */
    public function getParents()
    {
        if(!$this->parent_id)
        {
            return array();
        }

        $parents = array();
        $parentId = $this->parent_id;
        
        //print "<br><Br>**************************************************************** $this->name:: " . $parentId; flush();
        
        while($parentId != -1)
        {   
            $resource = Doctrine::getTable('Resource')->findById($parentId);
            $myresource = $resource->getFirst();
            $parents[] = $myresource;
            //FIXME:: Having this as $resource->parent_id is giving a parent_id object out
            $parentId = $resource->getFirst()->parent_id;
            
            //$parentId = $resource['parent_id'];
            //print "<br><Br>################################################################# $myresource->name :: " . $parentId . ">>"; flush();
            
        }

        //Need to reverse since we actually put closes in first,
        //so it would be the last in the array
        return array_reverse($parents);
     }
     
/*     public function getParentId()
     {
     	//return $this->parent_id;
     	if(!isset($this->parent_id) || is_null($this->parent_id))
     	{
     		//var_dump($this->parent_id);
     		//Zenfox_Debug::dump($this->parent_id, "PARENT ", true, false);
     		print "Parent Id not set for " . $this->name;
     		$this->parent_id = -1;
     	}
     	
     	print "ParentID:: " . $this->parent_id;
     	return $this->parent_id?$this->parent_id:-1;
     }*/

/*    public function setId($id)
    {
        $this->_id = $id;
    }
    
    public function setName($name)
    {
        $this->_name = $name;
    }

    public function setParentId($id)
    {
        $this->_parentId = $id;
    }*/

    //TODO:: Write code for putting this data in memcache
	public static function findByParentId($id) 
	{
		//NOTE:: This doesn't need connection switching as this is replicated data.
    	$query = Zenfox_Query::create()
    				->from ('Resource r');
    	
    	if(is_null($id))
    	{
			$query = $query->where('r.parent_id IS NULL');
    	}
    	else
    	{
    		$query = $query->where('r.parent_id = ?', $id);
    	}
    			
    	$resources = $query->fetchAssoc();	

		return self::_hydrateRows($rows);
	}
	
	public function getResourceId()
	{
		//FIXME:: Ideally this should be prefixed with RESOURCE_TYPE
		return $this->name;
	}
	
	/**
	 * This function is to get all the resources
	 * @return unknown_type
	 */
	public function getResources()
	{
		$query = Zenfox_Query::create()
    				->from ('Resource r');
    				
    	$result = $query->fetchArray();
    	
    	return $result;
	}
	/**
	 * This function is to get a resource by Id
	 * @param $id
	 * @return unknown_type
	 */
	public function getResourceById($id)
	{
		//$resource = Doctrine::getTable('Resource')->findById($id);
		
		//print_r($resource);
		
		$query = Zenfox_Query::create()
						->from('Resource r')
						->where('id = ?',$id);
						
		$resources = $query->fetchArray();
		$resource = $resources[0];

		return array(
					'id' => $resource['id'],
					'name' => $resource['name'],
					'resourceType' => $resource['resource_type'],
					'parentId' => $resource['parent_id'],
					'description' => $resource['description']
				);
		
	}
}