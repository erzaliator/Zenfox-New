<?php

/**
 * TournamentRegistrations
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class TournamentRegistrations extends BaseTournamentRegistrations
{
	public function registerPlayer($tournamentId, $playerId, $frontendId, $extra = NULL)
	{
		$onlineTournament = new OnlineTournaments();
		$onlineDetails = $onlineTournament->getOnlineDetails($tournamentId);
		if($extra < $onlineDetails['current_tier_id'])
		{
			return 4;
		}
		if($extra == $onlineDetails['current_tier_id'])
		{
			if($onlineDetails['tournament_state'] == 'InProgress' || $onlineDetails['tournament_state'] == 'InBreak' || $onlineDetails['tournament_state'] == 'Completed')
			{
				return 4;	
			}
		}
		$tournament = new Tournaments();
		$tournamentDetail = $tournament->getTournamentById($tournamentId);
		$tournamentConfigId = $tournamentDetail['tournament_config_id'];
		
		$tournamentConfigDetails = $this->_getTournamentDetails($extra, $playerId, $tournamentConfigId, $tournamentId);
		$tournamentChips = $tournamentConfigDetails['tournamentChips'];
		$amount = $tournamentConfigDetails['entryFee'];
		$amountType = $tournamentConfigDetails['amountType'];
		if($amountType != 'FREE')
		{
			$amountType = 'REAL';
		}

		if($tournamentChips)
		{
			$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			$date = new Zend_Date();
			$date->setTimezone('Asia/Calcutta');
			$currentTime = $date->get(Zend_Date::W3C);
			
			$query = Zenfox_Query::create()
				->from('TournamentRegistrations tr')
				->where('tr.player_id = ?', $playerId)
				->andWhere('tr.tournament_id = ?', $tournamentId);
			
			try
			{
				$result = $query->fetchArray();
			}
			catch(Exception $e)
			{
				//Zenfox_Debug::dump($e, "Exception");
				return 0;
			}
			
			$isEligibleLevelGreater = false;
			if(sizeof($result) > 0)
			{
				foreach($result as $tournamentData)
				{
					if($result[0]['eligible_level'] < $extra)
					{
						$query = Zenfox_Query::create()
									->update('TournamentRegistrations tr')
									->set('tr.extra', '?', 'LEVEL-' . $extra)
									->set('tr.eligible_level', '?', $extra)
									->where('tr.player_id = ?', $playerId)
									->andWhere('tr.tournament_id = ?', $tournamentId)
									->andWhere('tr.tier_id = ?', $tournamentData['tier_id']);
						try
						{
							$query->execute();
							$data['playerId'] = $playerId;
							$data['variableName'] = 'tournamentChips_' . $tournamentId;
							$data['variableValue'] = $tournamentChips;
								
							$accountVariable = new AccountVariable();
							$accountVariable->insert($data);
						}
						catch(Exception $e)
						{
							return 0;
						}
					}
					else
					{
						$isEligibleLevelGreater = true;
						break;
					}
				}
			}
			if($isEligibleLevelGreater)
			{
				return 2;
			}
			$tournamentRegistrations = new TournamentRegistrations();
			$tournamentRegistrations->tournament_id = $tournamentId;
			$tournamentRegistrations->player_id = $playerId;
			$tournamentRegistrations->frontend_id = $frontendId;
			$tournamentRegistrations->registration_time = $currentTime;
			$tournamentRegistrations->extra = "LEVEL-" . $extra;
			$tournamentRegistrations->amount = $amount;
			$tournamentRegistrations->amount_type = $amountType;
			$tournamentRegistrations->eligible_level = $extra;
			$tournamentRegistrations->tier_id = $extra;
			
			try
			{
				$tournamentRegistrations->save();
			
				/*
				 * Give him the initial tournament chips required!
				*
				* FIXME:: Remove the hardcoding!! - Blame Ravi!
				*/
			
				$data['playerId'] = $playerId;
				$data['variableName'] = 'tournamentChips_' . $tournamentId;
				$data['variableValue'] = $tournamentChips;
			
				$accountVariable = new AccountVariable();
				$accountVariable->insert($data);
			}
			catch(Exception $e)
			{
				return 0;
			}
			return 1;
		}
		else
		{
			return 3;
		}
	}
	
	private function _getTournamentDetails($level, $playerId, $tournamentConfigId, $tournamentId)
	{
		$player = new Player();
		$accountDetails = $player->getAccountDetails($playerId);
		
		$accountVariable = new AccountVariable();
		$variableName = 'tournamentChips_' . $tournamentId;
		$varData = $accountVariable->getData($playerId, $variableName);
		$tournamentChips = $varData['varValue'];
		
		$variableName = 'freeMoney';
		$varData = $accountVariable->getData($playerId, $variableName);
		$freeMoney = $varData['varValue'];
		$varId = $varData['varId'];

		$tournamentConfig = new TournamentConfig();
		$tournamentConfigData = $tournamentConfig->getTournamentDetails($tournamentConfigId);
		$configArray = Zend_Json::decode($tournamentConfigData['config']);
		$registrationCostArray = Zend_Json::decode($tournamentConfigData['registration_cost']);

		$requiredTournamentChips = $configArray['tiers'][$level-1]['eligibilityCriteria'][0]['amount'];
		$entryFee = $configArray['tiers'][$level-1]['buyinCost'][0]['amount'];
		$amountType = $configArray['tiers'][$level-1]['buyinCost'][0]['amountType'];

		$totalBalance = $accountDetails[0]['bank'] + $accountDetails[0]['winnings'] + $accountDetails[0]['bonus_bank'] + $accountDetails[0]['bonus_winnings'];
		
		$enabledRegistartion = true;
		$placeWager = true;
		
		switch($level)
		{
			case '1':
				if($tournamentChips < 4000)
				{
					$amountType = $registrationCostArray['registrationCost'][0]['amountType'];
					$entryFee = $registrationCostArray['registrationCost'][0]['amount'];
					if($amountType != 'FREE')
					{
						if($totalBalance >= $entryFee)
						{
							$placeWager = $this->_placeWager($playerId, $entryFee, $tournamentId);
							$tournamentChips = 4000;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
					else
					{
						if($freeMoney >= $entryFee)
						{
							$newFreeMoney = $freeMoney - $entryFee;
							$depositFreeMoney = $this->_depositFreeMoney($varId, $playerId, $newFreeMoney);
							$tournamentChips = 4000;
						}
						elseif($totalBalance > 0)
						{
							$data['playerId'] = $playerId;
							$data['variableName'] = 'freeMoney';
							$data['variableValue'] = 1000 - $entryFee;
							$accountVariable->insert($data);
							$tournamentChips = 4000;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
				}
				break;
			case '2':
				if($tournamentChips < $requiredTournamentChips)
				{
					if($amountType != 'FREE')
					{
						if($totalBalance >= $entryFee)
						{
							$placeWager = $this->_placeWager($playerId, $entryFee, $tournamentId);
							$tournamentChips = $requiredTournamentChips;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
					else
					{
						if($freeMoney >= $entryFee)
						{
							$newFreeMoney = $freeMoney - $entryFee;
							$depositFreeMoney = $this->_depositFreeMoney($varId, $playerId, $newFreeMoney);
							$tournamentChips = $requiredTournamentChips;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
				}
				break;
			case '3':
				if($tournamentChips < $requiredTournamentChips)
				{
					if($amountType != 'FREE')
					{
						if($totalBalance >= $entryFee)
						{
							$placeWager = $this->_placeWager($playerId, $entryFee, $tournamentId);
							$tournamentChips = $requiredTournamentChips;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
					else
					{
						if($freeMoney >= $entryFee)
						{
							$newFreeMoney = $freeMoney - $entryFee;
							$depositFreeMoney = $this->_depositFreeMoney($varId, $playerId, $newFreeMoney);
							$tournamentChips = $requiredTournamentChips;
						}
						else
						{
							$enabledRegistartion = false;
						}
					}
				}
				break;
		}
		if($enabledRegistartion && $placeWager)
		{
			return array(
				'tournamentChips' => $tournamentChips,
				'entryFee' => $entryFee,
				'amountType' => $amountType,
			);
		}
		return false;
	}
	
	private function _placeWager($playerId, $amount, $tournamentId)
	{
		$playerTransactions = new PlayerTransactions();
		$sourceId = $playerTransactions->placeWager($playerId, $amount, 'BOTH', $tournamentId, "Tournament Registration");
	
		if(!$sourceId)
		{
			return false;
		}
		$auditReport = new AuditReport();
		$reportMessage = $auditReport->checkError($sourceId, $playerId);
	
		$counter = 0;
		while((!($reportMessage['processed'] == 'PROCESSED')) && (!($reportMessage['error'] == 'NOERROR')))
		{
			if($counter == 3)
			{
				break;
			}
			$reportMessage = $auditReport->checkError($sourceId, $playerId);
			if($reportMessage)
			{
				break;
			}
	
			$counter++;
		}
		if($counter == 3 && !$reportMessage)
		{
			return false;
		}
		if(($reportMessage['processed'] == 'PROCESSED') && ($reportMessage['error'] == 'NOERROR'))
		{
			return true;
		}
		elseif($counter != 3)
		{
			return false;
		}
	}
	
	private function _depositFreeMoney($varId, $playerId, $freeMoney)
	{
		$accountVariable = new AccountVariable();
		$data['varId'] = $varId;
		$data['playerId'] = $playerId;
		$data['variableValue'] = $freeMoney;
		$updateFreeMoney = $accountVariable->update($data);
		if($updateFreeMoney)
		{
			return true;
		}
		return false;
	}

	public function getRegisteredLevel($playerId, $tournamentId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->select('max(tr.eligible_level)')
					->from('TournamentRegistrations tr')
					->where('tr.tournament_id = ?', $tournamentId)
					->andWhere('tr.player_id = ?', $playerId);
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		if($result)
		{
			return $result[0]['max'];
		}
		return false;
	}
	
	public function getLastRegisteredTournament($playerId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->select('tr.tournament_id, tr.registration_time')
					->from('TournamentRegistrations tr')
					->where('tr.player_id = ?', $playerId)
					->orderBy('tr.registration_time desc')
					->limit(1);
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		if($result)
		{
			$registrationTime = $result[0]['registration_time'];
			$tournamentId = $result[0]['tournament_id'];
			$conn = Zenfox_Partition::getInstance()->getMasterConnection();
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			$query = Zenfox_Query::create()
						->select('t.tournament_name')
						->from('Tournaments t')
						->where('t.tournament_id = ?', $result[0]['tournament_id']);
			
			try
			{
				$result = $query->fetchArray();
			}
			catch(Exception $e)
			{
				return false;
			}
			$name = $result[0]['tournament_name'];
		}
		return array(
			'name' => $name,
			'registrationTime' => $registrationTime
		);
	}
	
	public function getplayerlist($tournamentid)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		$index = 0;
		
		foreach ($conns as $conn)
		{
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
			$query = Zenfox_Query::create()
					->select('t.player_id,t.eligible_level')
					->from('TournamentRegistrations t')
					->where('t.tournament_id = ?', $tournamentid);
			
			try {
				
				$playerlist[$index] = $query->fetchArray();
				
			}
			catch(Exception $e)
			{
				echo $e."<br/>";
				Zenfox_Debug::dump($e, "Exception");
			}
			
			$index++;
		}
		
		
		if(!empty($playerlist))
		{
				
			
			$length = count($playerlist);
			$index=0;
			while($length>0)
			{
				$partitionlength[$length-1] = count($playerlist[$length-1]);
					
				while($partitionlength[$length-1] > 0)
				{
					$playerids[$length-1][$partitionlength[$length-1]-1] = $playerlist[$length-1][$partitionlength[$length-1]-1]['player_id'];
					$playerslists[$index]["eligibilitylevel"] = $playerlist[$length-1][$partitionlength[$length-1]-1]['eligible_level'];;
						
					$accountdetail = new AccountDetail();
	
					$playerdetail[$length-1][$partitionlength[$length-1]-1] = $accountdetail->getDetails($playerids[$length-1][$partitionlength[$length-1]-1]);
		
					$playerslists[$index]["playerid"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['player_id'];
					$playerslists[$index]["login"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['login'];
					$playerslists[$index]["email"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['email'];
						
		
					$index++;
					$partitionlength[$length-1]--;
				}
				$length--;
			}
				
			return $playerslists;
			
			
			
			$length = count($playerlist);
			$index=0;
			while($length>0)
			{
				$partitionlength[$length-1] = count($playerlist[$length-1]);
					
				while($partitionlength[$length-1] > 0)
				{
					$playerids[$length-1][$partitionlength[$length-1]-1] = $playerlist[$length-1][$partitionlength[$length-1]-1]['player_id'];
					$playerslists[$index]["eligibilitylevel"] = $playerlist[$length-1][$partitionlength[$length-1]-1]['eligible_level'];;
						
					$accountdetail = new AccountDetail();
	
					$playerdetail[$length-1][$partitionlength[$length-1]-1] = $accountdetail->getDetails($playerids[$length-1][$partitionlength[$length-1]-1]);
		
					$playerslists[$index]["playerid"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['player_id'];
					$playerslists[$index]["login"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['login'];
					$playerslists[$index]["email"] = $playerdetail[$length-1][$partitionlength[$length-1]-1]['email'];
						
		
					$index++;
					$partitionlength[$length-1]--;
				}
				$length--;
			}
	
			return $playerslists;
			
		}
		else 
		{
			return false;
		}
	}
	
	public function gettournamentamountdetails($maxmin)
	{
		$conns = Zenfox_Partition::getInstance()->getConnections(-1);
		$index = 0;
		
		foreach ($conns as $conn)
		{
			Doctrine_Manager::getInstance()->setCurrentConnection($conn);
				
			$query = Zenfox_Query::create()
			->select('count(t.player_id),t.tier_id,t.tournament_id,sum(t.amount),amount_type')
			->from('TournamentRegistrations t')
			->where('t.tournament_id >= ?', $maxmin["min"])
			->andwhere('t.tournament_id <= ?', $maxmin["max"])
			->groupBy('t.tournament_id , t.tier_id')
			->orderBy('t.tournament_id','asc');
				
			try {
		
				$playerlist[$index] = $query->fetchArray();
		
			}
			catch(Exception $e)
			{
				Zenfox_Debug::dump($e, "Exception");
			}
				
			$index++;
		}
		return $playerlist;
	}
	
}