<?php

/**
 * Tournaments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class Tournaments extends BaseTournaments
{
	public function tournamentminilist($offset)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = "Zenfox_Query::create()
					->from('Tournaments t')
					->orderBy('t.start_time desc')";
		
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, 0);
		
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage(10);
		$paginator->setPageRange(3);
		$paginator->setCurrentPageNumber($offset);
		
		$index=0;
		
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				$result[$index] = $logs;
				$index++;
			}
			$paginatorSession->unsetAll();
		
			$tournamentsList = array();
			$storedConfig = array();
			$tournamentConfig = new TournamentConfig();
			if($result)
			{
				foreach($result as $index => $tournaments)
				{
					$storedConfig['config_id'] =0;
					if(!in_array($storedConfig['config_id'], $tournaments['tournament_config_id']))
					{
						$tournamentConfigData = $tournamentConfig->getTournamentDetails($tournaments['tournament_config_id']);
						$storedConfig['config_id'] = $tournaments['tournament_config_id'];
						$rewardArray = Zend_Json::decode($tournamentConfigData['rewards']);
						$amountType = $rewardArray['rewards'][1][0]['amountType'];
						$prize = 0;
						foreach($rewardArray['rewards'] as $rewardData)
						{
							$prize += $rewardData[0]['amount'];
						}
						$prize += $rewardArray['consolationRewards']['numberOfRewards'] * $rewardArray['consolationRewards']['rewards'][1][0]['amount'];
						$storedConfig['prize-' . $tournaments['tournament_config_id']] =  $prize;
						$storedConfig['entryfee-' . $tournaments['tournament_config_id']] =  $tournamentConfigData['registration_cost'];
					}
					$explodeTime = explode(" ", $tournaments['start_time']);
					$tournamentStartDate = date('d-M-Y',strtotime($explodeTime[0]));
					$tournamentStartTime = date('g:i a', strtotime($explodeTime[1]));
				
					$tournamentsList[$index]['Tournament Id'] = $tournaments['tournament_id'];
					$tournamentsList[$index]['Tournament Name'] = $tournaments['tournament_name'];
					$tournamentsList[$index]['Entry Fee'] = $storedConfig['entryfee-' . $tournaments['tournament_config_id']];
					$tournamentsList[$index]['Prize'] = $storedConfig['prize-' . $tournaments['tournament_config_id']];
					$tournamentsList[$index]['Status'] = $tournaments['status'];
					$tournamentsList[$index]['Start Time'] = $tournamentStartDate . " " . $tournamentStartTime;
					$tournamentsList[$index]['Amount Type'] = $amountType;
					$tournamentsList[$index]['Running Level'] = 1;
				}
			}
			return array($paginator, $tournamentsList);
		}
	
	}
	
	public function getTournamentsList()
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$result = "";
		
		$query = Zenfox_Query::create()
					->from('Tournaments t')
					->whereIn('t.status', array('SCHEDULED', 'CREATED', 'STARTED'))
					->orderBy('t.start_time asc');
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			
		}
		$tournamentsList = array();
		$storedConfig = array();
		$tournamentConfig = new TournamentConfig();
		if($result)
		{
			foreach($result as $index => $tournaments)
			{
				if(!in_array($storedConfig['config_id'], $tournaments['tournament_config_id']))
				{
					$tournamentConfigData = $tournamentConfig->getTournamentDetails($tournaments['tournament_config_id']);
					$storedConfig['config_id'] = $tournaments['tournament_config_id'];
					$rewardArray = Zend_Json::decode($tournamentConfigData['rewards']);
					$amountType = $rewardArray['rewards'][1][0]['amountType'];
					$prize = 0;
					foreach($rewardArray['rewards'] as $rewardData)
					{
						$prize += $rewardData[0]['amount'];
					}
					$prize += $rewardArray['consolationRewards']['numberOfRewards'] * $rewardArray['consolationRewards']['rewards'][1][0]['amount'];
					$storedConfig['prize-' . $tournaments['tournament_config_id']] =  $prize;
					$storedConfig['entryfee-' . $tournaments['tournament_config_id']] =  $tournamentConfigData['registration_cost'];
				}
				$explodeTime = explode(" ", $tournaments['start_time']);
				$tournamentStartDate = date('d-M-Y',strtotime($explodeTime[0]));
				$tournamentStartTime = date('g:i a', strtotime($explodeTime[1]));
				
				$tournamentsList[$index]['Tournament Id'] = $tournaments['tournament_id'];
				$tournamentsList[$index]['Tournament Name'] = $tournaments['tournament_name'];
				$tournamentsList[$index]['Entry Fee'] = $storedConfig['entryfee-' . $tournaments['tournament_config_id']];
				$tournamentsList[$index]['Prize'] = $storedConfig['prize-' . $tournaments['tournament_config_id']];
				$tournamentsList[$index]['Status'] = $tournaments['status'];
				$tournamentsList[$index]['Start Time'] = $tournamentStartDate . " " . $tournamentStartTime;
				$tournamentsList[$index]['Amount Type'] = $amountType;
				$tournamentsList[$index]['Running Level'] = 1;
			}
		}
		return $tournamentsList;
	}
	
	public function getCompletedTournaments($offset, $itemsPerPage)
	{
		$query = "Zenfox_Query::create()
					->from('Tournaments t')
					->where('t.status = ?', 'COMPLETED')
					->orderBy('t.start_time desc')";
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, 0);
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsPerPage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset);
		if($paginator->getTotalItemCount())
		{
			$tournamentsList = array();
			$storedConfig = array();
			$tournamentConfig = new TournamentConfig();
			$index = 0;
			foreach($paginator as $tournaments)
			{
				if(!in_array($storedConfig['config_id'], $tournaments['tournament_config_id']))
				{
					$tournamentConfigData = $tournamentConfig->getTournamentDetails($tournaments['tournament_config_id']);
					$storedConfig['config_id'] = $tournaments['tournament_config_id'];
					$rewardArray = Zend_Json::decode($tournamentConfigData['rewards']);
					$amountType = $rewardArray['rewards'][1][0]['amountType'];
					$prize = 0;
					foreach($rewardArray['rewards'] as $rewardData)
					{
						$prize += $rewardData[0]['amount'];
					}
					$prize += $rewardArray['consolationRewards']['numberOfRewards'] * $rewardArray['consolationRewards']['rewards'][1][0]['amount'];
					$storedConfig['prize-' . $tournaments['tournament_config_id']] =  $prize;
					$storedConfig['entryfee-' . $tournaments['tournament_config_id']] =  $tournamentConfigData['registration_cost'];
				}
				$explodeTime = explode(" ", $tournaments['start_time']);
				$tournamentStartDate = date('d-M-Y',strtotime($explodeTime[0]));
				$tournamentStartTime = date('g:i a', strtotime($explodeTime[1]));
				
				$tournamentsList[$index]['Tournament Id'] = $tournaments['tournament_id'];
				$tournamentsList[$index]['Tournament Name'] = $tournaments['tournament_name'];
				$tournamentsList[$index]['Entry Fee'] = $storedConfig['entryfee-' . $tournaments['tournament_config_id']];
				$tournamentsList[$index]['Prize'] = $storedConfig['prize-' . $tournaments['tournament_config_id']];
				$tournamentsList[$index]['Status'] = $tournaments['status'];
				$tournamentsList[$index]['Start Time'] = $tournamentStartDate . " " . $tournamentStartTime;
				$tournamentsList[$index]['Amount Type'] = $amountType;
				$tournamentsList[$index]['Running Level'] = 1;
				$index++;
			}
			$paginatorSession->unsetAll();
			return array(
				'paginator' => $paginator,
				'tournamentsList' => $tournamentsList
			);
		}
		return NULL;
	}
	
	public function getTournamentById($tournamentId)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('Tournaments t')
					->where('t.tournament_id = ?', $tournamentId);
		
		$result = $query->fetchArray();
		return $result[0];
	}
	
	public function createtournament($type,$name,$starttime,$configid,$description)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		
				
		$this->tournament_type = $type;
		$this->tournament_name = $name;
		$this->create_time = $starttime;
		$this->start_time = $starttime;
		$this->status = "SCHEDULED";
		$this->tournament_config_id = $configid;
		$this->description = $description;
		
		try{
			$this->save($partition);
		}
		catch (Exception $e)
		{
			return false;
		}
		
		return true;
		
	}
	
	public function getmaxminids($starttime,$endtime)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		$query = Zenfox_Query::create()
		->select('max(t.tournament_id),min(t.tournament_id)')
		->from('Tournaments t')
		->where('t.start_time >= ?', $starttime)
		->andwhere('t.start_time <= ?', $endtime);
	
		$result = $query->fetchArray();
		return $result[0];
	}
	
	
	
}