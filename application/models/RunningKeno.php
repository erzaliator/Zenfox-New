<?php

/**
 * RunningRoulette
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */

/**
 * This class has implemented to get the RunningRoulette Game information
 * @author Nikhil Gupta
 * @date January 2, 2010
 */
class RunningKeno extends BaseRunningKeno
{
	/*
	 * This function get all the data of the game for selected machineId
	 * @returns array
	 */
	public function getMachineData($id, $gameFlavour)
	{
		$conn = Zenfox_Partition::getInstance()->getCommonConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('RunningKeno r')
					->where('r.id = ?', $id)
					->andWhere('r.game_flavour = ?', $gameFlavour)
					->andWhere('r.enabled = ?', 'ENABLED');
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		if($result)
		{
			return array(
				'runningMachineId' => $result[0]['id'],
				'machineName' => $result[0]['machine_name'],
				'gameFlavour' => $result[0]['game_flavour'],
				'description' => $result[0]['description'],
				'denominations' => $result[0]['denominations'],
				'defaultDenomination' => $result[0]['default_denomination'],
				'minBet' => $result[0]['min_bet'],
				'minNums' => $result[0]['min_nums'],
				'maxBet' => $result[0]['max_bet'],
				'maxNums' => $result[0]['max_nums'],
				'enabled' => $result[0]['enabled'],
				'machineId' => $result[0]['machine_id'],
				'pjpEnabled' => $result[0]['pjp_enabled'],
				'amountType' => $result[0]['amount_type'],
				'defaultCurrency' => $result[0]['default_currency'],
				'machineType' => $result[0]['machine_type'],
				'minCoins' => $result[0]['min_coins'],
				'maxCoins' => $result[0]['max_coins']);
		}
		return NULL;
	}
	
	/*
	 * This function get all the machines details from RunningKeno
	 * @return array
	 */
	public function getAllMachinesData()
	{
		//FIXME read it from slave.
		//TODO Call a getCommonConnection function to make the connection
		//DONE Wrote the getCommonConnection function in partition.php
		$conn = Zenfox_Partition::getInstance()->getCommonConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('RunningKeno');
					
		$result = $query->fetchArray();
		return $result;
	}
	
	
	/**
	 * Get Running Keno id machine_id and machine_name
	 * @param $id
	 * @return unknown_type
	 */
	public function getRunningkenoId($machineId, $machineName)
	{
		$conn = Zenfox_Partition::getInstance()->getCommonConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->select('id')
					->from('RunningKeno r')
					->where('r.machine_id = ?',$machineId)
					->addWhere('r.machine_name = ?',$machineName);
					
		$result = $query->fetchOne();
		return $result;
		
	}
	
}