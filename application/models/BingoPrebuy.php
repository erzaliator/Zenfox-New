<?php

/**
 * BingoPrebuy
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class BingoPrebuy extends BaseBingoPrebuy
{
	public function getactiveprebuys($starttime , $endtime, $status,$offset= NULL ,$itemsperpage)
	{
		$authSession = new Zend_Auth_Storage_Session();
		$sessionData = $authSession->read();
		$csrId = $sessionData['id'];
		$csrfrontendids = $sessionData['frontend_ids'];
		$frontendids = implode(",", $csrfrontendids);
		
		$session = new Zend_Session_Namespace('BingoPrebuy');
			
		$query = "Zenfox_Query::create()
					->from('BingoPrebuy  Bp')
					->where('Bp.created >= ?', '$starttime')
					->andWhere('Bp.created <= ?', '$endtime')
					->andWhereIn('Bp.status',array($status))
					->WhereIn('Bp.frontend_id', array($frontendids))";
				
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, -1, $session);
					
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
    	$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsperpage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset);
		if(!$paginator->getTotalItemCount())
		{
			return false;
		}
		$playerData = array();
		$index = 0;
		$bingoroomobj = new BingoRoom();
		foreach($paginator as $logs)
		{
			$playerData[$index]['Player Id'] = $logs['player_id'];
			$playerData[$index]['Prebuy Id'] = $logs['prebuy_id'];
			$playerData[$index]['total games'] = $logs['total_games'];
			$playerData[$index]['remaining games'] = $logs['remaining_games'];
			$playerData[$index]['max/min cards'] = $logs['max_cards'].'/'.$logs['min_cards'];
			$playerData[$index]['created'] = $logs['created'];
			
			$roomids = explode(',',$logs['allowed_room_ids']);
			$count = count($roomids);
			$innerindex =0;
			$roomnames = "";
			while($innerindex < $count)
			{
				$roomdata = $bingoroomobj->getRoomData($roomids[$innerindex]);
				if($innerindex == 0)
				{
					$roomnames = $roomdata["name"];
				}
				else
				{
					$roomnames = $roomnames." , ".$roomdata["name"];
				}
				
				$innerindex++;
			}
			$playerData[$index]['allowed rooms'] = $roomnames;
			$playerData[$index]['status'] = $logs['status'];
			if($playerData[$index]['status'] == "ENABLED")
			{
				$playerData[$index]["Change Status"] = '<form action="/bingo/activeprebuys/page/'.$offset.'/starttime/'.$starttime.'/endtime/'.$endtime.'/item/'.$itemsperpage.'/status/'.$status.'/PlayerId/' . $logs['player_id'] . '/Statuschangesto/DISABLED/PrebuyId/' . $logs['prebuy_id'] . '" method = "POST"><input type="submit" name="submit" value="Disable Prebuy"></form>';
			}
			else 
			{
				$playerData[$index]["Change Status"] = '<form action="/bingo/activeprebuys/page/'.$offset.'/starttime/'.$starttime.'/endtime/'.$endtime.'/item/'.$itemsperpage.'/status/'.$status.'/PlayerId/' . $logs['player_id'] . '/Statuschangesto/ENABLED/PrebuyId/' . $logs['prebuy_id'] . '" method = "POST"><input type="submit" name="submit" value="ENABLE Prebuy"></form>';
			}
			
			$index++;
		}
		$paginatorSession->unsetAll();
		//Zenfox_Debug::dump($playerData);
		return array($paginator, $playerData);
					
	}
	
	public function changestatus($PlayerId,$PrebuyId,$status)
	{
		$connName = Zenfox_Partition::getInstance()->getConnections($PlayerId);
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($connName);
		
		$query = Zenfox_Query::create()
    					->update('BingoPrebuy  Bp')
    					->set('Bp.status', '?', $status)
    					->where('Bp.player_id = ?', $PlayerId)
    					->andWhere('Bp.prebuy_id = ?' , $PrebuyId);
    					
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			print('Unable to update Status') . $e;
		}
	}
	
	public function addprebuycards($playerId,$roomId,$cards)
	{
		  $connName = Zenfox_Partition::getInstance()->getConnections($playerId);
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($connName);
	
          $frontendId = Zend_Registry::getInstance()->get('frontendId');
          
                 $bingoprebuyobj = new BingoPrebuy();

                $date = new Zend_Date();
                $today = $date->get(Zend_Date::W3C);
                               
                $bingoprebuyobj->player_id = $playerId;
                $bingoprebuyobj->category_id =1;
                $bingoprebuyobj->total_games = 1;
                $bingoprebuyobj->remaining_games = 1;
                $bingoprebuyobj->max_cards = $cards;
                $bingoprebuyobj->max_amount = "";
                $bingoprebuyobj->max_total_amount = "";
                $bingoprebuyobj->total_amount = "";
                $bingoprebuyobj->min_cards = $cards;
                $bingoprebuyobj->allowed_room_ids = $roomId;
                $bingoprebuyobj->base_currency = "GBP";
                $bingoprebuyobj->status = "ENABLED";
                $bingoprebuyobj->created = $today;
                $bingoprebuyobj->last_enabled = $today;
                $bingoprebuyobj->last_created = $today;
                $bingoprebuyobj->frontend_id = $frontendId;
                $bingoprebuyobj->notes = "Cards added from the Game";
                $bingoprebuyobj->room_id = $roomId;
                $bingoprebuyobj->next_game_cards = "true";


                try
                {
                        $bingoprebuyobj->save();
		
		}
		catch(Exception $e)
		{
			print('Unable to add Cards') . $e;
			return false;
		}
		
		return true;
	}
	
	public function insertprebuydata($playerId,$data)
	{
		  $connName = Zenfox_Partition::getInstance()->getConnections($playerId);
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($connName);

          $frontendId = Zend_Registry::getInstance()->get('frontendId');
                 $bingoprebuyobj = new BingoPrebuy();

                $date = new Zend_Date();
                $today = $date->get(Zend_Date::W3C);
                               
                $bingoprebuyobj->player_id = $playerId;
                $bingoprebuyobj->category_id =$data["category_id"];
                $bingoprebuyobj->total_games = $data["total_games"];
                $bingoprebuyobj->remaining_games = $data["total_games"];
                $bingoprebuyobj->max_cards = $data["cards_per_game"];
                $bingoprebuyobj->max_amount = "";
                $bingoprebuyobj->max_total_amount = "";
                $bingoprebuyobj->total_amount = "";
                $bingoprebuyobj->min_cards = $data["cards_per_game"];
                $bingoprebuyobj->allowed_room_ids = $data["room_id"];
                $bingoprebuyobj->base_currency = "GBP";
                $bingoprebuyobj->status = "ENABLED";
                $bingoprebuyobj->created = $today;
                $bingoprebuyobj->last_enabled = $today;
                $bingoprebuyobj->last_created = $today;
                $bingoprebuyobj->frontend_id = $frontendId;
                $bingoprebuyobj->notes = "Cards prebaught by the player through the website";
                $bingoprebuyobj->room_id = $data["room_id"];
                $bingoprebuyobj->next_game_cards = "false";


                try
                {
                        $bingoprebuyobj->save();
		
		}
		catch(Exception $e)
		{
			print('Unable to add Cards') . $e;
			return false;
		}
		
		return true;
	}
	
	public function getprebuydata($playerId)
	{
		$connName = Zenfox_Partition::getInstance()->getConnections($playerId);
		$partition = Doctrine_Manager::getInstance()->setCurrentConnection($connName);
		
		$query = Zenfox_Query::create()
    					->select('Bp.category_id,Bp.total_games,Bp.remaining_games,Bp.created,Bp.status')
						->from('BingoPrebuy  Bp')
    					->where('Bp.player_id = ?', $playerId)
    					->andWhere('Bp.status =?', 'ENABLED');
    					
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			echo $e;
		}
		
		return $result;
	} 
}
