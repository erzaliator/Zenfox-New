<?php

/**
 * BaseGamelogKeno
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $log_id
 * @property integer $session_id
 * @property integer $player_id
 * @property integer $machine_id
 * @property integer $frontend_id
 * @property float $bet_amount
 * @property clob $generated_numbers
 * @property string $selected_numbers
 * @property string $win_string
 * @property float $win_amount
 * @property timestamp $datetime
 * @property enum $amount_type
 * @property enum $pjp_winstatus
 * @property integer $pjp_id
 * @property integer $pjp_rng
 * @property float $pjp_win_amount
 * @property string $wagered_currency
 * @property integer $running_machine_id
 * @property string $game_flavour
 * @property enum $spin_type
 * @property Account $Account
 * @property RunningKeno $RunningKeno
 * @property GamelogSession $GamelogSession
 * @property Currency $Currency
 * @property Frontend $Frontend
 * @property Pjp $Pjp
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseGamelogKeno extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('gamelog_keno');
        $this->hasColumn('log_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('session_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('player_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('machine_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('frontend_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('bet_amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('generated_numbers', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('selected_numbers', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('win_string', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('win_amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('datetime', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('amount_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'REAL',
              1 => 'BONUS',
              2 => 'BOTH',
             ),
             ));
        $this->hasColumn('pjp_winstatus', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'WIN',
              1 => 'NOWIN',
             ),
             'default' => 'NOWIN',
             ));
        $this->hasColumn('pjp_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('pjp_rng', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('pjp_win_amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('wagered_currency', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '3',
             ));
        $this->hasColumn('running_machine_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('game_flavour', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('spin_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'AUTO',
              1 => 'NORMAL',
              2 => 'BONUS',
              3 => 'FEATURE',
             ),
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('Account', array(
             'local' => 'player_id',
             'foreign' => 'player_id'));

        $this->hasOne('RunningKeno', array(
             'local' => 'machine_id',
             'foreign' => 'id'));

        $this->hasOne('GamelogSession', array(
             'local' => 'player_id',
             'foreign' => 'player_id'));

        $this->hasOne('Currency', array(
             'local' => 'wagered_currency',
             'foreign' => 'currency_code'));

        $this->hasOne('Frontend', array(
             'local' => 'frontend_id',
             'foreign' => 'id'));

        $this->hasOne('Pjp', array(
             'local' => 'pjp_id',
             'foreign' => 'id'));
    }
}