<?php

/**
 * BaseCsr
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $alias
 * @property string $passwd
 * @property string $name
 * @property enum $enabled
 * @property Doctrine_Collection $Journal
 * @property Doctrine_Collection $running_slots
 * @property Doctrine_Collection $tickets
 * @property Doctrine_Collection $ticket_datas
 * @property Doctrine_Collection $forwardeds
 * @property Doctrine_Collection $csr_gms_groups
 * @property Doctrine_Collection $gms_logs
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseCsr extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('csr');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('alias', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('passwd', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('name', 'string', 55, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '55',
             ));
        $this->hasColumn('enabled', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'ENABLED',
              1 => 'DISABLED',
             ),
             'default' => 'DISABLED',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasMany('Journal', array(
             'local' => 'id',
             'foreign' => 'csr_id'));

        $this->hasMany('RunningSlot as running_slots', array(
             'local' => 'id',
             'foreign' => 'last_updated_by'));

        $this->hasMany('Ticket as tickets', array(
             'local' => 'id',
             'foreign' => 'csr_owner'));

        $this->hasMany('TicketData as ticket_datas', array(
             'local' => 'id',
             'foreign' => 'owner'));

        $this->hasMany('Forwarded as forwardeds', array(
             'local' => 'id',
             'foreign' => 'forwarded_to'));

        $this->hasMany('CsrGmsGroup as csr_gms_groups', array(
             'local' => 'id',
             'foreign' => 'csr_id'));

        $this->hasMany('GmsLog as gms_logs', array(
             'local' => 'id',
             'foreign' => 'csr_id'));
    }
}