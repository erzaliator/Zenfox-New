<?php

/**
 * BaseAffiliate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $affiliate_id
 * @property string $alias
 * @property string $passwd
 * @property string $firstname
 * @property string $lastname
 * @property string $company
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $country
 * @property string $zip
 * @property string $email
 * @property string $phone
 * @property string $payment_type*
 * @property integer $master_id
 * @property timestamp $created
 * @property enum $enabled
 * @property string $language
 * @property integer $affiliate_frontend_id
 * @property float $balance
 * @property float $master_contrib*
 * @property float $master_deduction*
 * @property float $buddy_balance*
 * @property string $timezone
 * @property Language $Language
 * @property AffiliateFrontend $AffiliateFrontend
 * @property Affiliate $Affiliate
 * @property Doctrine_Collection $affiliates
 * @property Doctrine_Collection $AffiliateTracker
 * @property Doctrine_Collection $affiliate_transactions
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseAffiliate extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('affiliate');
        $this->hasColumn('affiliate_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('alias', 'string', 25, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '25',
             ));
        $this->hasColumn('passwd', 'string', 25, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '25',
             ));
        $this->hasColumn('firstname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '50',
             ));
        $this->hasColumn('lastname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '50',
             ));
        $this->hasColumn('company', 'string', 100, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '100',
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '200',
             ));
        $this->hasColumn('city', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '50',
             ));
        $this->hasColumn('state', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '50',
             ));
        $this->hasColumn('country', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '50',
             ));
        $this->hasColumn('zip', 'string', 11, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '11',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 20, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '20',
             ));
        $this->hasColumn('payment_type', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('master_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('created', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('enabled', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'ENABLED',
              1 => 'DISABLED',
             ),
             'default' => 'ENABLED',
             ));
        $this->hasColumn('language', 'string', 7, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '7',
             ));
        $this->hasColumn('affiliate_frontend_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('balance', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        /*$this->hasColumn('master_contrib', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('master_deduction', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));*/
        $this->hasColumn('buddy_balance', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('timezone', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('credit_master_contribution', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('debit_master_contribution', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('credit_slave_contribution', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('debit_slave_contribution', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('affiliate_base_currency', 'string', 3, array(
             'type' => 'string',
             'length' => '3',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('Language', array(
             'local' => 'language',
             'foreign' => 'locale',
             'onUpdate' => 'cascade'));

        $this->hasOne('AffiliateFrontend', array(
             'local' => 'affiliate_frontend_id',
             'foreign' => 'id'));

        $this->hasOne('Affiliate', array(
             'local' => 'master_id',
             'foreign' => 'affiliate_id'));

        $this->hasMany('Affiliate as affiliates', array(
             'local' => 'affiliate_id',
             'foreign' => 'master_id'));

        $this->hasMany('AffiliateTracker', array(
             'local' => 'id',
             'foreign' => 'affiliate_id'));

        $this->hasMany('AffiliateTransaction as affiliate_transactions', array(
             'local' => 'affiliate_id',
             'foreign' => 'affiliate_id'));
    }
}