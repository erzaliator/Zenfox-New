<?php

/**
 * BaseCurrency
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $currency_code
 * @property string $currency
 * @property string $symbol
 * @property string $currency_description
 * @property Doctrine_Collection $account_details
 * @property Doctrine_Collection $country_currencies
 * @property Doctrine_Collection $running_slots
 * @property Doctrine_Collection $pjps
 * @property Doctrine_Collection $frontends
 * @property Doctrine_Collection $gamelog_roulettes
 * @property Doctrine_Collection $gamelog_slots
 * @property Doctrine_Collection $gamelog_kenoes
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseCurrency extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('currency');
        $this->hasColumn('currency_code', 'string', 3, array(
             'type' => 'string',
             'primary' => true,
             'unique' => true,
             'fixed' => 1,
             'length' => '3',
             ));
        $this->hasColumn('currency', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('symbol', 'string', 5, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '5',
             ));
        $this->hasColumn('currency_description', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasMany('AccountDetail as account_details', array(
             'local' => 'currency_code',
             'foreign' => 'current_currency'));

        $this->hasMany('CountryCurrency as country_currencies', array(
             'local' => 'currency_code',
             'foreign' => 'currency_code'));

        $this->hasMany('RunningSlot as running_slots', array(
             'local' => 'currency_code',
             'foreign' => 'default_currency'));

        $this->hasMany('Pjp as pjps', array(
             'local' => 'currency_code',
             'foreign' => 'currency'));

        $this->hasMany('Frontend as frontends', array(
             'local' => 'currency_code',
             'foreign' => 'default_currency'));

        $this->hasMany('GamelogRoulette as gamelog_roulettes', array(
             'local' => 'currency_code',
             'foreign' => 'wagered_currency'));

        $this->hasMany('GamelogSlot as gamelog_slots', array(
             'local' => 'currency_code',
             'foreign' => 'wagered_currency'));

        $this->hasMany('GamelogKeno as gamelog_kenoes', array(
             'local' => 'currency_code',
             'foreign' => 'wagered_currency'));
        
        $this->hasMany('BingoRoom as bingo_rooms', array(
             'local' => 'currency_code',
             'foreign' => 'currency'));
    }
}