<?php

/**
 * systemHealth
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $   
 */
class SystemHealth extends BaseSystemHealth
{
	public function gethealth($tag, $reporttype, $starttime, $endtime,$offset=0,$itemsperpage)
	{
        
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		
		$query = "Zenfox_Query::create()
		->from('SystemHealth s')
		->Where('s.report_type = ?', '$reporttype')
		->andwhere('s.tag =?', '$tag')
		->andWhere('s.start_time >= ?', '$starttime')
		->andWhere('s.end_time <= ?', '$endtime')";
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, 0);
		
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator =  new Zend_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsperpage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset);
		
		$index = 0;
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				$health[$index] = $logs;
		
				$index++;
			}
			$paginatorSession->unsetAll();
			return array($paginator, $health);
		}
		
		return NULL;
		
		
	}
	
	
	public function getconversionhealth($networkorfrontend,$frontendid, $reporttypetype, $reporttypetime, $starttime, $endtime)
	{
	
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$result = array();
		
		$pattern1 = '/Registrations/';
		$pattern2 = '/ConversionToWagerers/';
		$pattern3 = '/ConversionToDepositors/';
		
		if($networkorfrontend == "Network")
		{
			switch($reporttypetype)
			{
				case 'Direct':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "network%"')
					->andwhere('s.tag like "%Direct"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Buddy':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "network%"')
					->andwhere('s.tag like "%Buddy"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Affiliates':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "network%"')
					->andwhere('s.tag like "%Affiliates"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Total':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "network%"')
					->andwhere('s.tag like "%Buddy" OR s.tag like "%Affiliates" OR s.tag like "%Direct" ')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
			
			}
		}
		else 
		{
			switch($reporttypetype)
			{
				case 'Direct':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "frontend%"')
					->andwhere('s.tag like "%Direct"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.frontend_id = ?', $frontendid)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Buddy':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "frontend%"')
					->andwhere('s.tag like "%Buddy"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.frontend_id = ?', $frontendid)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Affiliates':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "frontend%"')
					->andwhere('s.tag like "%Affiliates"')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.frontend_id = ?', $frontendid)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
				case 'Total':
					$valuequery = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "frontend%"')
					->andwhere('s.tag like "%Buddy" OR s.tag like "%Affiliates" OR s.tag like "%Direct" ')
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.frontend_id = ?', $frontendid)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
					break;
			
			}
		}
		
		$healthresult = $valuequery->fetchArray();
		
		
			if(!empty($healthresult))
			{
				$length = count($healthresult);
				$index = 0;
						
				while($length > 0)
				{
					if($reporttypetime == "EOD")
						{
						$daytype = "DAY";
						$day = date('l', strtotime($healthresult[$length-1]["start_time"]));
						}
						elseif($reporttypetime == "EOM")
						{
						$daytype = "MONTH";
						$day = date('F', strtotime($healthresult[$length-1]["start_time"]));
						}
						elseif($reporttypetime == "EOW")
						{
						$daytype = "WEEK";
						$day = date('W', strtotime($healthresult[$length-1]["start_time"]));
						}
						$result[$index][$daytype] = $day;
						
					$result[$index]["time"] = $healthresult[$length-1]["start_time"]."-".$healthresult[$length-1]["end_time"];
						
					while($result[$index]["time"] == $healthresult[$length-1]["start_time"]."-".$healthresult[$length-1]["end_time"])
					{
						$match =  $healthresult[$length-1]["tag"];
						if(preg_match($pattern1,$match))
						{
							$result[$index]["Registrations"] += $healthresult[$length-1]["value"];
						}
						elseif(preg_match($pattern2,$match))
						{
							$result[$index]["ConversionToWagerers"] += $healthresult[$length-1]["value"];
						}
						elseif(preg_match($pattern3,$match))
						{
							$result[$index]["ConversionToDepositors"] += $healthresult[$length-1]["value"];
						}
						$length--;
					}
					
					$index++;
				}
						
				$length = count($result);
				while($length >0)
				{
					$finalvalue[$length-1]['Time'] = $result[$length-1]["time"];
					$finalvalue[$length-1][$daytype] = $result[$length-1][$daytype];
					$finalvalue[$length-1]['Registrations'] = $result[$length-1]["Registrations"];
					$finalvalue[$length-1]['ConversionToWagerers'] = $result[$length-1]["ConversionToWagerers"];
					$finalvalue[$length-1]['ConversionToDepositors'] = $result[$length-1]["ConversionToDepositors"];
					$length--;
				}
				return  $finalvalue;
			}
		return NULL;
	}
	
	public function getSystemReportByTag($tagName, $reportType, $from, $to, $offset, $itemsPerPage, $frontendId = null)
	{
		/*print('tagName - ' . $tagName);
		print('reportType - ' . $reportType);
		print('from - ' . $from);
		print('to - ' . $to);
		print('offset - ' . $offset);
		print('items - ' . $itemsPerPage);*/
		if($frontendId == null) 
		{
			$query = "Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tagName')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to')";
		}
		
		else 
		{
			$query = "Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tagName')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to')
						->andWhereIn(s.frontend_id,array($frontendId))";
			
		}
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, 0);
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator = new Zenfox_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsPerPage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset); 
		$tagData = array();
		$index = 0;
		$snapshot = new Snapshot();
		
		if($paginator->getCurrentItemCount())
		{
			foreach($paginator as $data)
			{
				if($snapshot->isJsonTag($tagName) == false)
					$tagData[$index][$tagName] = $data['value'];
				else {
					$data['value'] = json_decode($data['value'],true);
					$tagData[$index][$tagName] = $data['value'];
				}
				$index++;
			}
		}
		else
		{
			$tagData[$index][$tagName] = NULL;
		}
		//Zenfox_Debug::dump($tagData, 'tagData');
		$paginatorSession->unsetAll();
		return array(
				'paginator' => $paginator,
				'tagData' => $tagData,
				'query' => $query,
		);
	}
	
	public function getSnapshotForTag($from,$to,$tag,$reportType,$function,array $frontend = null)
	{
		$snapshot = new Snapshot();
		if(!$snapshot->isJsonTag($tag))
		{
			//print '<br>Normal '.$tag;
			return $this->getSnapshotForNormalTag($from,$to,$tag,$reportType,$function,$frontend);
		}	
		else
		{
			//print '<br>Json '.$tag;
			
			return $this->getSnapshotForJsonTag($from,$to,$tag,$reportType,$function,$frontend);
		}
	}
	
		
	public function getSnapshotForNormalTag($from,$to,$tag,$reportType,$function,array $frontendId = null)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
			
				
		if($function == 'SUM')
		{
			if($frontendId == null)
			{
				$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('SUM(h.value) as value')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to);
			}
			else
			{
				$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('SUM(h.value) as value')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to)
									->andWhereIn("h.frontend_id",$frontendId);
				
			}
			//print '<pre>'.$tag;
			//print $from; print $to; print $reportType;						
		}
		else if($function == 'COUNT')
		{
			
			if($frontendId = null)
			{
				$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('COUNT(h.value) as value')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to);
			}
			else 
			{
				$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('COUNT(h.value) as value')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to)
									->andWhereIn('h.frontend_id',$frontendId);
			}
			
		}
		try {
			$array = $query->fetchArray();
			
		}
		catch(Exception $e)
		{
			//echo $e->getMessage(). 'HAHA';
			return false;
		}
		//print_r($array);
		//print '<pre>';
		if(!$array[0]['tag'])
		{
			$array[0]['tag'] = $tag;
			$array[0]['value'] = 0;
			$array[0]['start_time'] = $from;
			$array[0]['end_time'] = $to;
			$array[0]['report_type'] = $reportType;
		}
		
		return $array[0];
	}
	
	public function getSnapshotForJsonTag($from,$to,$tag,$reportType,$function,array $frontendId = null)
	{
			
		
		if($frontendId = null)
		{
			$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('h.value')
									//->addSelect('COUNT(h.value) as count')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to);
		}
		else 
		{
			$query = Zenfox_Query::create()
									->select('h.tag')
									->addSelect('h.report_type')
									->addSelect('h.start_time')
									->addSelect('h.end_time')
									->addSelect('h.value')
									//->addSelect('COUNT(h.value) as count')
									->from('SystemHealth h')
									->where('h.tag = ?',$tag)
									->andWhere('h.report_type = ?',$reportType)
									->andWhere('h.start_time >= ?',$from)
									->andWhere('h.end_time <= ?',$to)
									->andWhereIn('h.frontend_id',$frontendId);
		}
			
		$array = array();
		try {
			$array = $query->fetchArray();
			$count = (int)($query->getCountQuery());
			
		}
		catch(Exception $e)
		{
			//echo $e->getMessage(). 'HAHA';
			return false;
		}
		
		$count = count($array);
		$data = array();
		
		//exit();	
		
		//print_r($array);
		//print '$$$';
		if($count > 0) {
			//print '--';
			//print_r($array);
			//print $tag;
			$data = $this->getSummaryJsonTag($tag,$array,$count);
		
			return $data;
		}
	
		
		return $data;
	}
	
	
	public function getSummaryJsonTag($tag,$array,$count = null,$jsonRead = null)
	{
		//print_r($array);
		if($tag == 'networkDepositorsCount' || $tag == 'frontendDepositorsCount')
		{
			$data = $this->getSummaryDepositCount($array, 1, $jsonRead);
		}
		else if($tag == 'networkDepositsCount' || $tag == 'frontendDepositsCount')
		{
			$data = $this->getSummaryDepositCount($array, 1, $jsonRead);
		}
		else if($tag == 'networkDepositsAmount' || $tag == 'frontendDepositsAmount')
		{
			$data = $this->getSummaryDepositAmount($array, 1, $jsonRead);
		}
		else if($tag == 'networkDepositsPerTransaction' || $tag == 'frontendDepositsPerTransaction')
		{
			$data = $this->getSummaryDepositAmount($array, $count, $jsonRead);
		}
		else if($tag == 'networkDepositsPerPlayer' || $tag == 'frontendDepositsPerPlayer')
		{
			$data = $this->getSummaryDepositAmount($array, $count, $jsonRead);			
		}
		else if(strstr($tag,'All')) {
			foreach ($array as $record) {
				$record['value'] = json_decode($record['value'],true);
			}
			$data = $record; //we assume that the All tags have only one entry per tag.
			
		}
		return $data;
	}

	public function getSummaryDepositCount($array, $count, $jsonRead = null)
	{
		if(!$jsonRead) 
		{
			$newArray = array();
			foreach ($array as $record) {
				if(count($record['value']) == 0)
					continue;
				$record['value'] = json_decode($record['value'],true);
				$newArray[] = $record;
			}
			$array = $newArray;
		
		
			$sumArray = array();
		
			foreach($array as $record)
			{
				if(count($record['value']) == 0)
					continue;			
				foreach ($record['value'] as $schemeKey => $schemeValue)
				{
					$bonusScheme = new BonusScheme();
					$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
					$schemeName = $schemeDetails['name'];
					foreach ($schemeValue as $levelKey => $levelValue)
					{
						$bonusLevel = new BonusLevel();
						$bonusDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
						$bonusName = $bonusDetails[0]['level_name'];
					
						$sumArray[$schemeName][$levelName] += ($levelValue/$count);
					}
				}
			}
		}
		
		else {
			
						
			foreach($array as $record)
			{
				if(count($record['value']) == 0)
					continue;			
				foreach ($record['value'] as $schemeName => $schemeValue)
				{
					foreach ($schemeValue as $levelName => $levelValue)
					{
										
						$sumArray[$schemeName][$levelName] += ($levelValue/$count);
					}
				}
			}
		}
		//if()
		//print_r($sumArray);
		return $sumArray;
	}
	
	public function getSummaryDepositAmount($array, $count, $jsonRead = null)
	{
		/*if($jsonRead == true) 
			print '<pre>';print_r($array);print'</pre>';*/
		$sumArray = array();
		
		if(!$jsonRead) {
			$newArray = array();
			foreach ($array as $record) {
				if(count($record['value']) == 0)
					continue;
				$record['value'] = json_decode($record['value'],true);
				$newArray[] = $record;
			}
			$array = $newArray;
		
		/*print '<pre>';
		print_r($array);
		print '##---------</pre>';*/
		$sumArray = array();
		
			foreach($array as $record)
			{
				if(count($record['value']) == 0)
					continue;			
				foreach ($record['value'] as $schemeKey => $schemeValue)
				{
					$bonusScheme = new BonusScheme();
					$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
				//print_r($schemeDetails);
					$schemeName = $schemeDetails['name'];
				//print 'Scheme'.$schemeName.'SchemeKey'.$schemeKey.'**'.'<br>';
					foreach ($schemeValue as $levelKey => $levelValue)
					{
						$bonusLevel = new BonusLevel();
						$levelDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
						//print $levelKey.'-';
						$levelName = $levelDetails[0]['level_name'];
					
						foreach($levelValue as $currencyName => $currencyValue)
						{
							$sumArray[$schemeName][$levelName][$currencyName] += ($currencyValue/$count);
						}
					}
				}
			//print '-------------------------------------------------';
			}
		}
		else
		{
		
						
			foreach($array as $record)
			{
				if(count($record['value']) == 0)
					continue;			
				foreach ($record['value'] as $schemeName => $schemeValue)
				{
					foreach ($schemeValue as $levelName => $levelValue)
					{
										
						foreach($levelValue as $currencyName => $currencyValue)
						{
							$sumArray[$schemeName][$levelName][$currencyName] += ($currencyValue/$count);
						}
					}
				}
			}
		}
				
		/*if($jsonRead == true) {
			print '<pre>99999999999999999999999999';
			print_r($sumArray);
			print '</pre>999999999999999999999999';
		}*/
		/*exit();*/
		return $sumArray;
	}
	
	
	public function getSnapshotTotal($dataArray) {
		$snapshot = new Snapshot();
		
		$final = array();
		foreach ($dataArray as  $tag => $value) {
			if($snapshot->isJsonTag($tag) == true) {
				
				if($tag == 'networkDepositorsCount' || $tag == 'frontendDepositorsCount')
				{
					$count = 1;
					$data = $this->getSummaryDepositAmount($array, 1, $jsonRead);
				}
				else if($tag == 'networkDepositsCount' || $tag == 'frontendDepositsCount')
				{
					$count = 1;
					$data = $this->getSummaryDepositAmount($array, 1, $jsonRead);
				}
				else if($tag == 'networkDepositsAmount' || $tag == 'frontendDepositsAmount')
				{
					$data = $this->getSummaryDepositAmount($array, 1, $jsonRead);
				}
				else if($tag == 'networkDepositsPerTransaction' || $tag == 'frontendDepositsPerTransaction')
				{
					$data = $this->getSummaryDepositAmount($array, $count, $jsonRead);
				}
				else if($tag == 'networkDepositsPerPlayer' || $tag == 'frontendDepositsPerPlayer')
				{
					$data = $this->getSummaryDepositAmount($array, $count, $jsonRead);			
				}
				
				
			}
		}
	}
	
	
	public function getSystemDetailReportByTag($tagName, $reportType, $from, $to, $offset, $itemsPerPage, $frontendId = null)
	{
		
		if($frontendId == null) 
		{
			$query = "Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tagName')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to')";
		}
		
		else 
		{
			$query = "Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tagName')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to')
						->andWhereIn(s.frontend_id,array($frontendId))";
			
		}
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, 0);
		$paginatorSession = new Zend_Session_Namespace('paginationCount');
		$paginatorSession->value = false;
		$paginator = new Zenfox_Paginator($adapter);
		$paginator->setItemCountPerPage($itemsPerPage);
		$paginator->setPageRange(2);
		$paginator->setCurrentPageNumber($offset); 
		$tagData = array();
		//$dateData = array();
		$index = 0;
		$snapshot = new Snapshot();
		
		if($paginator->getCurrentItemCount())
		{
			foreach($paginator as $data)
			{
				//print_r($data['tag']);
				if($snapshot->isJsonTag($data['tag']) == false)
					$tagData[$tagName][$data['start_time']] = $data['value'];
					
				else {
					//print $tagName.'=====';
					
					$tagData[$tagName][$data['start_time']] = $this->getJsonTagDetail($tagName,json_decode($data['value'],true));
				}
				$dateData[$index] = $data['start_time'];
				$index++;
			}
		}
		else
		{
			$tagData[$data['start_time']][$tagName] = NULL;
		}
		//Zenfox_Debug::dump($tagData, 'tagData');
		$paginatorSession->unsetAll();
		return array(
				'paginator' => $paginator,
				'tagData' => $tagData,
				'tagName' => $tagName,
				'start_time' =>$dateData,
				'query' => $query,
		);
	}
	
	
	public function getJsonTagDetail($tag, $array) {
		
		//TODO :: For the detail report take the 'All' tag instead of a manual averaging.
		
		if(count($array) == 0) {
			return array();
		}
		
		if($tag == 'networkDepositorsCount' || $tag == 'frontendDepositorsCount')
		{
			$data = $this->getDetailDepositCount($array,false);
		}
		else if($tag == 'networkDepositsCount' || $tag == 'frontendDepositsCount')
		{
			$data = $this->getDetailDepositCount($array,false);
		}
		else if($tag == 'networkDepositsAmount' || $tag == 'frontendDepositsAmount')
		{
			$data = $this->getDetailDepositAmount($array,false);
		}
		else if($tag == 'networkDepositsPerTransaction' || $tag == 'frontendDepositsPerTransaction')
		{
			$data = $this->getDetailDepositAmount($array,true);
		}
		else if($tag == 'networkDepositsPerPlayer' || $tag == 'frontendDepositsPerPlayer')
		{
			$data = $this->getDetailDepositAmount($array,true);			
		}
		
		return $data;
	}
	
	public function getDetailDepositAmount($array, $shouldAvg = null, $keyById = null)
	{
		$count = 0;
		$currencyArray = array();
		//print_r($array);//exit();
		foreach ($array as $schemeKey => $schemeValue)
		{
			if(!$keyById) {
			$bonusScheme = new BonusScheme();
			$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
		//print_r($schemeDetails);
			$schemeName = $schemeDetails['name'];
			}
			else {
				$schemeName = $schemeKey;
			}

			foreach ($schemeValue as $levelKey => $levelValue)
			{
				if(!$keyById) {
					$bonusLevel = new BonusLevel();
					$levelDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
					//print $levelKey.'-';
					$levelName = $levelDetails[0]['level_name'];
				}
				else {
					$levelName = $levelKey;		
				}
			
				foreach($levelValue as $currencyName => $currencyValue)
				{
					$sumArray[$currencyName] += $currencyValue;
					$count +=1;
					if(!in_array($currencyName,$currencyArray)) {
						$currencyArray[] = $currencyName;
					}
				}
			}
		}
		if($shouldAvg) {
			foreach($currencyArray as $currency) {
				$sumArray[$currency] = $sumArray[$currency]/$count;
			}
		}
		
		//print_r($sumArray);exit();
		return $sumArray;
		
	}
	
	public function getDetailInactiveCount($array, $shouldAvg, $keyById = null) 
	{
		$sum = 0;
		$total = 0;
		$sumArray = array();
		foreach($array as $type => $scheme) {
			
			foreach ($scheme as $schemeKey => $schemeValue) {
				
				if(!$keyById) {
					$bonusScheme = new BonusScheme();
					$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
					//print_r($schemeDetails);
					$schemeName = $schemeDetails['name'];
				}
				else {
					$schemeName = $schemeKey;
				}
				
				foreach ( $schemeValue as $bonusLevel => $count) {
					
					if(!$keyById) {
						$bonusLevel = new BonusLevel();
						$levelDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
						//print $levelKey.'-';
						$levelName = $levelDetails[0]['level_name'];
					}
					else {
						$levelName = $levelKey;		
					}
			
					$sumArray[$type][$schemeName][$levelName] += $count;
					
					
					
				}
			}
		}
	}
	
	public function getInactiveCount($array, $shouldAvg, $keyById = null) 
	{
		$sum = 0;
		$count = 0;
		foreach($array as $type => $scheme) {
			
			foreach ($scheme as $schemeKey => $schemeValue) {
				
				if(!$keyById) {
					$bonusScheme = new BonusScheme();
					$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
					//print_r($schemeDetails);
					$schemeName = $schemeDetails['name'];
				}
				else {
					$schemeName = $schemeKey;
				}
				
				foreach ( $schemeValue as $bonusLevel => $count) {
					
					if(!$keyById) {
						$bonusLevel = new BonusLevel();
						$levelDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
						//print $levelKey.'-';
						$levelName = $levelDetails[0]['level_name'];
					}
					else {
						$levelName = $levelKey;		
					}
			
					$sum += $levelValue;
					$count += 1;
					
					
				}
			}
		}
		if($shouldAvg) {
			$sum = $sum/$count;
		}
		return $sum;
	}
	
	
	public function getFlavorCount($array) {
		
		return $array;
	}
	
	public function getFlavorWagered($array) {
		
		
	}
	
	public function getDetailDepositCount($array, $shouldAvg, $keyById = null)
	{
		$sum = 0;
		$count = 0;
		foreach ($array as $schemeKey => $schemeValue)
		{
			if(!$keyById) {
			$bonusScheme = new BonusScheme();
			$schemeDetails = $bonusScheme->getSchemeData($schemeKey);
		//print_r($schemeDetails);
			$schemeName = $schemeDetails['name'];
			}
			else {
				$schemeName = $schemeKey;
			}

			foreach ($schemeValue as $levelKey => $levelValue)
			{
				if(!$keyById) {
					$bonusLevel = new BonusLevel();
					$levelDetails = $bonusLevel->getLevelData($levelKey,$schemeKey);
					//print $levelKey.'-';
					$levelName = $levelDetails[0]['level_name'];
				}
				else {
					$levelName = $levelKey;		
				}
			
					$sum += $levelValue;
					$count += 1;
			}
		}
		
		if($shouldAvg) {
			$sum = $sum/$count;
		}
		
		return $sum;
		
	}
	
	
	//fromDate and toDate are expected to be strings and not Zend Date objects
	public function getSnapshotForSpecialAccumulationTag($tag,$fromDate,$toDate, $reportType = null,array $frontend = null)
	{
		if(!$reportType) {
			$zendFrom = new Zend_Date($fromDate);
			$zendTo = new Zend_Date($toDate);
			
			$zendHourFrom = $zendFrom->getHour();
			$zendHourTo = $zendTo->getHour();
						
			if($zendHourFrom->compareHour($zendHourTo) == 0 ) {
				$reportType = 'EOH';
				$fromDate = date('Y-m-d',$zendHourFrom->getTimestamp());
				$toDate = date('Y-m-d',$zendHourTo->getTimestamp());
			}
			else {
				
				$zendDayFrom = $zendFrom->getDay();
				$zendDayTo = $zendTo->getDay();
				
				if($zendDayFrom->compare($zendDayTo) == 0 ) {
					$reportType = 'EOD';
					$fromDate = date('Y-m-d',$zendDayFrom->getTimestamp());
					$toDate = date('Y-m-d',$zendDayTo->getTimestamp());
				}
				
				else {
					$zendWeekFrom = $zendFrom->getWeek();
					$zendWeekTo = $zendTo->getWeek();
					
					if($zendWeekFrom->compare($zendWeekTo) == 0) {
						$reportType = 'EOW';
						$fromDate = date('Y-m-d',$zendWeekFrom->getTimestamp());
						$toDate = date('Y-m-d',$zendWeekTo->getTimestamp());
					}
					else {
						$zendMonthFrom = $zendFrom->getMonth();
						$zendMonthTo = $zendTo->getMonth();
						
						if($zendMonthFrom->compare($zendMonthTo) == 0) {
							$reportType = 'EOM';
							$fromDate = date('Y-m-d',$zendMonthFrom->getTimestamp());
							$toDate = date('Y-m-d',$zendMonthTo->getTimestamp());
						}
						else {
							$year = date('Y',strtotime($from));
							$reportType = 'EOY';
							$fromDate = '1st Jan '.$year;
							$toDate = '31st Dec '.$year;
						}
					}
			}
			
		}
	}
		
	$fromDate = date('Y-m-d',strtotime($fromDate));
	$toDate = date('Y-m-d',strtotime($toDate));
	$snapShot = new Snapshot();
	
	
	
	if($frontendId == null) 
	{
		//$tagName = 'network'.str_replace('network','All',$tag);		
		$query = Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tag')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to');
		
		if($snapShot->isSpecialAccumulationTag($tag) == 'INT') {
			
		}
	}
		
	else 
	{
		//$tagName = 'frontend'.str_replace('frontend','All',$tag);	
		$query = Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag = ?', '$tag')
						->andWhere('s.report_type = ?', '$reportType')
						->andWhere('s.start_time >= ?', '$from')
						->andWhere('s.end_time <= ?', '$to')
						->andWhereIn(s.frontend_id,$frontendId);
			
	}
	
	$array = $query->fetchArray();
	$array[0]['value'] = json_decode($array[0]['value'],true);
	
	if($snapShot->isGameSnapshotTag($tag)) {
		return $array;
	}
	
	$array = $this->getSummaryJsonTag($tag,$array,1,true);
	return $array;
	
	}
	
	public function gettransactingplayers($networkorfrontend,$id,$reporttypetime, $starttime, $endtime)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		if($networkorfrontend == "Frontend")
		{
			$pattern1 = '/frontendOneTimeDepositors/';
			$pattern2 = '/frontendTwoToThreeTimeDepositors/';
			$pattern3 = '/frontendFourToSixTimeDepositors/';
			$pattern4 = '/frontendSevenOrMoreTimeDepositors/';
			
			$query = Zenfox_Query::create()
					->from('SystemHealth s')
					->where('s.tag like "frontend%"')
					->andwhere('s.tag like "%Depositors"')
					->andWhere('s.frontend_id = ?', $id)
					->andWhere('s.report_type = ?', $reporttypetime)
					->andWhere('s.start_time >= ?', $starttime)
					->andWhere('s.end_time <= ?', $endtime)
					->orderby('s.start_time','ASC');
			
			$healthresult = $query->fetchArray();
		}
		elseif($networkorfrontend == "Network")
		{
			
			$pattern1 = '/networkOneTimeDepositors/';
			$pattern2 = '/networkTwoToThreeTimeDepositors/';
			$pattern3 = '/networkFourToSixTimeDepositors/';
			$pattern4 = '/networkSevenOrMoreTimeDepositors/';
			
			
			$query = Zenfox_Query::create()
						->from('SystemHealth s')
						->where('s.tag like "network%"')
						->andwhere('s.tag like "%Depositors"')
						->andWhere('s.report_type = ?', $reporttypetime)
						->andWhere('s.start_time >= ?', $starttime)
						->andWhere('s.end_time <= ?', $endtime)
						->orderby('s.start_time','ASC');
			
			$healthresult = $query->fetchArray();
		}	
		else
		{
			$pattern1 = '/trackerOneTimeDepositors/';
			$pattern2 = '/trackerTwoToThreeTimeDepositors/';
			$pattern3 = '/trackerFourToSixTimeDepositors/';
			$pattern4 = '/trackerSevenOrMoreTimeDepositors/';
			
			$trackerhealthobj = new TrackerHealth();
			$healthresult = $trackerhealthobj->gettransactinghealth($networkorfrontend,$id,$reporttypetime,$starttime,$endtime);
			
		}

			if(!empty($healthresult))
			{
				$length = count($healthresult);
				$index = 0;
					
				while($length > 0)
					{
						if($reporttypetime == "EOD")
						{
						$daytype = "DAY";
						$day = date('l', strtotime($healthresult[$length-1]["start_time"]));
						}
						elseif($reporttypetime == "EOM")
						{
						$daytype = "MONTH";
						$day = date('F', strtotime($healthresult[$length-1]["start_time"]));
						}
						elseif($reporttypetime == "EOW")
						{
						$daytype = "WEEK";
						$day = date('W', strtotime($healthresult[$length-1]["start_time"]));
						}
						$result[$index][$daytype] = $day;
						
						$result[$index]["time"] = $healthresult[$length-1]["start_time"]."-".$healthresult[$length-1]["end_time"];
						
						while($result[$index]["time"] == $healthresult[$length-1]["start_time"]."-".$healthresult[$length-1]["end_time"])
						{
								
							$match =  $healthresult[$length-1]["tag"];
								
							if(preg_match($pattern1,$match))
							{
								$result[$index]["OneTime"] += $healthresult[$length-1]["value"];
							}
							elseif(preg_match($pattern2,$match))
							{
								$result[$index]["TwoToThreeTime"] += $healthresult[$length-1]["value"];
							}
							elseif(preg_match($pattern3,$match))
							{
								$result[$index]["FourToSixTime"] += $healthresult[$length-1]["value"];
							}
							elseif(preg_match($pattern4,$match))
							{
								$result[$index]["SevenOrMoreTime"] += $healthresult[$length-1]["value"];
							}
							$length--;
						}
						
						
						$result[$index]["Total"] = $result[$index]["OneTime"]+$result[$index]["TwoToThreeTime"]+$result[$index]["FourToSixTime"]+$result[$index]["SevenOrMoreTime"];
						$index++;
						
					}
	
  					$length = count($result);
  					while($length >0)
  					{
  						$finalvalue[$length-1]['Time'] = $result[$length-1]["time"];
  						$finalvalue[$length-1][$daytype] = $result[$length-1][$daytype];
  						$finalvalue[$length-1]['OneTime'] = $result[$length-1]["OneTime"];
  						$finalvalue[$length-1]['TwoToThreeTime'] = $result[$length-1]["TwoToThreeTime"];
  						$finalvalue[$length-1]['FourToSixTime'] = $result[$length-1]["FourToSixTime"];
  						$finalvalue[$length-1]['SevenOrMoreTime'] = $result[$length-1]["SevenOrMoreTime"];
  						$finalvalue[$length-1]['Total'] = $result[$length-1]["Total"];
  						$length--;
  					}	
 					 	return	$finalvalue;
			}
			
			return NULL;
		
	}
	
	
	public function getregistrationsummary($networkorfrontend, $frontendid, $reporttypetime, $starttime, $endtime)
	{
	
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		
	
			if($networkorfrontend == "Network")
			{
				$valuequery = Zenfox_Query::create()
				->from('SystemHealth s')
				->where('s.tag like "network%"')
				->andwhere('s.tag like "%Buddy" OR s.tag like "%Affiliates" OR s.tag like "%Direct" ')
				->andWhere('s.report_type = ?', $reporttypetime)
				->andWhere('s.start_time >= ?', $starttime)
				->andWhere('s.end_time <= ?', $endtime)
				->orderby('s.tag','ASC');
				
				$healthresult = $valuequery->fetchArray();
				
				$pattern1 = '/networkRegistrationsDirect/';
				$pattern2 = '/networkConversionToWagerersDirect/';
				$pattern3 = '/networkConversionToDepositorsDirect/';
				$pattern4 = '/networkRegistrationsAffiliate/';
				$pattern5 = '/networkConversionToWagerersAffiliate/';
				$pattern6 = '/networkConversionToDepositorsAffiliate/';
				$pattern7 = '/networkRegistrationsBuddy/';
				$pattern8 = '/networkConversionToWagerersBuddy/';
				$pattern9 = '/networkConversionToDepositorsBuddy/';
			}
			else 
			{
				$valuequery = Zenfox_Query::create()
				->from('SystemHealth s')
				->where('s.tag like "frontend%"')
				->andwhere('s.tag like "%Buddy" OR s.tag like "%Affiliates" OR s.tag like "%Direct" ')
				->andWhere('s.frontend_id = ?', $frontendid)
				->andWhere('s.report_type = ?', $reporttypetime)
				->andWhere('s.start_time >= ?', $starttime)
				->andWhere('s.end_time <= ?', $endtime)
				->orderby('s.tag','ASC');
				
				$healthresult = $valuequery->fetchArray();
				
				$pattern1 = '/frontendRegistrationsDirect/';
				$pattern2 = '/frontendConversionToWagerersDirect/';
				$pattern3 = '/frontendConversionToDepositorsDirect/';
				$pattern4 = '/frontendRegistrationsAffiliate/';
				$pattern5 = '/frontendConversionToWagerersAffiliate/';
				$pattern6 = '/frontendConversionToDepositorsAffiliate/';
				$pattern7 = '/frontendRegistrationsBuddy/';
				$pattern8 = '/frontendConversionToWagerersBuddy/';
				$pattern9 = '/frontendConversionToDepositorsBuddy/';
			}
				
			//Zenfox_Debug::dump($healthresult, 'tagData');exit();
				
			if(!empty($healthresult))
			{
				$length = count($healthresult);
				
				while($length > 0)
				{
					$match =  $healthresult[$length-1]["tag"];
						
						while($match ==  $healthresult[$length-1]["tag"])
						{
								
							$match =  $healthresult[$length-1]["tag"];
								
							if(preg_match($pattern1,$match))
							{
								$result["Registrations"]["Direct"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern2,$match))
							{
								$result["ConversionToWagerers"]["Direct"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern3,$match))
							{
								$result["ConversionToDepositors"]["Direct"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern4,$match))
							{
								$result["Registrations"]["Affiliate"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern5,$match))
							{
								$result["ConversionToWagerers"]["Affiliate"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern6,$match))
							{
								$result["ConversionToDepositors"]["Affiliate"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern7,$match))
							{
								$result["Registrations"]["Buddy"] += $healthresult[$length-1]["value"];
								
							}
							if(preg_match($pattern8,$match))
							{
								$result["ConversionToWagerers"]["Buddy"] += $healthresult[$length-1]["value"];
							}
							if(preg_match($pattern9,$match))
							{
								$result["ConversionToDepositors"]["Buddy"] += $healthresult[$length-1]["value"];
							}
							
							$length--;
						}
						
						
				}
				
				
				$length = count($result);
				
				$finalresult["Registrations"]["type"] = "Registrations";
				$finalresult["ConversionToWagerers"]["type"] = "ConversionToWagerers";
				$finalresult["ConversionToDepositors"]["type"] = "ConversionToDepositors";
				
				while($length>0)
				{
					$finalresult["Registrations"]["Direct"] =$result["Registrations"]["Direct"];
					$finalresult["Registrations"]["Buddy"] =$result["Registrations"]["Buddy"];
					$finalresult["Registrations"]["Affiliate"] =$result["Registrations"]["Affiliate"];
					$finalresult["ConversionToWagerers"]["Direct"] =$result["ConversionToWagerers"]["Direct"];
					$finalresult["ConversionToWagerers"]["Buddy"] =$result["ConversionToWagerers"]["Buddy"];
					$finalresult["ConversionToWagerers"]["Affiliate"] =$result["ConversionToWagerers"]["Affiliate"];
					$finalresult["ConversionToDepositors"]["Direct"] =$result["ConversionToDepositors"]["Direct"];
					$finalresult["ConversionToDepositors"]["Buddy"] =$result["ConversionToDepositors"]["Buddy"];
					$finalresult["ConversionToDepositors"]["Affiliate"] =$result["ConversionToDepositors"]["Affiliate"];
					$length--;
				}
				
				$finalresult["Registrations"]["Total"] = $finalresult["Registrations"]["Direct"]+$finalresult["Registrations"]["Buddy"]+$finalresult["Registrations"]["Affiliate"];
				$finalresult["ConversionToWagerers"]["Total"] = $finalresult["ConversionToWagerers"]["Direct"]+$finalresult["ConversionToWagerers"]["Buddy"]+$finalresult["ConversionToWagerers"]["Affiliate"];
				$finalresult["ConversionToDepositors"]["Total"] = $finalresult["ConversionToDepositors"]["Direct"]+$finalresult["ConversionToDepositors"]["Buddy"]+$finalresult["ConversionToDepositors"]["Affiliate"];
								//Zenfox_Debug::dump($finalresult, 'tagData');exit();
				return $finalresult;
			}
			else
			{
				return NULL;
			}
	}
	
	
	public function getsystemtransactionslist($networkorfrontend, $id,$report_type_time,$starttime,$endtime)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		if($networkorfrontend == "Network")
		{
				
			$valuequery = Zenfox_Query::create()
			->from('SystemHealth s')
			->where('s.tag like "networkDeposit%" or s.tag like "networkBonusAwarded" or s.tag like "networkManagementRake"')
			->andWhere('s.report_type = ?', $report_type_time)
			->andWhere('s.start_time >= ?', $starttime)
			->andWhere('s.end_time <= ?', $endtime)
			->orderby('s.start_time','ASC');
			
			$pattern1 = '/networkDepositorsCount/';
			$pattern2 = '/networkDepositsCount/';
			$pattern3 = '/networkDepositsAmount/';
			$pattern4 = '/networkDepositsPerPlayer/';
			$pattern5 = '/networkDepositsPerTransaction/';
			$pattern6 = '/networkBonusAwarded/';
			$pattern7 = '/networkManagementRake/';
		
		}
		elseif($networkorfrontend == "Frontend")
		{
			
			$valuequery = Zenfox_Query::create()
			->from('SystemHealth s')
			->where('s.tag like "frontendDeposit%" or s.tag like "frontendBonusAwarded" or s.tag like "frontendManagementRake"')
			->andWhere('s.frontend_id = ?', $id)
			->andWhere('s.report_type = ?', $report_type_time)
			->andWhere('s.start_time >= ?', $starttime)
			->andWhere('s.end_time <= ?', $endtime)
			->orderby('s.start_time','ASC');
			
			$pattern1 = '/frontendDepositorsCount/';
			$pattern2 = '/frontendDepositsCount/';
			$pattern3 = '/frontendDepositsAmount/';
			$pattern4 = '/frontendDepositsPerPlayer/';
			$pattern5 = '/frontendDepositsPerTransaction/';
			$pattern6 = '/frontendBonusAwarded/';
			$pattern7 = '/frontendManagementRake/';
		
		}
		else 
		{
			$pattern1 = '/trackerDepositorsCount/';
			$pattern2 = '/trackerDepositsCount/';
			$pattern3 = '/trackerDepositsAmount/';
			$pattern4 = '/trackerDepositsPerPlayer/';
			$pattern5 = '/trackerDepositsPerTransaction/';
			$pattern6 = '/trackerBonusAwarded/';
			$pattern7 = '/trackerManagementRake/';
			
			
			$trahealth = new TrackerHealth();
			$valuequery = $trahealth->gettrackertransactions($networkorfrontend,$id,$report_type_time, $starttime, $endtime);
		}
		
		$healthresult = $valuequery->fetchArray();
		
		
			if(!empty($healthresult))
			{
				$length = count($healthresult);
				$index = 0;
				while( $length >0)
				{
					if($report_type_time == "EOD")
					{
						$daytype = "DAY";
						$day = date('l', strtotime($healthresult[$length-1]["start_time"]));
					}
					elseif($report_type_time == "EOM")
					{
						$daytype = "MONTH";
						$day = date('F', strtotime($healthresult[$length-1]["start_time"]));
					}
					elseif($report_type_time == "EOW")
					{
						$daytype = "WEEK";
						$day = date('W', strtotime($healthresult[$length-1]["start_time"]));
					}
					$result[$index][$daytype] = $day;
					
					 $result[$index]["time"] = $healthresult[$length-1]["start_time"]." "."-"." ".$healthresult[$length-1]["end_time"];
					
					 
					while($result[$index]["time"] == $healthresult[$length-1]["start_time"]." "."-"." ".$healthresult[$length-1]["end_time"])
					{
						$match =  $healthresult[$length-1]["tag"];
					if((preg_match($pattern1,$match)) or  (preg_match($pattern2,$match)) )
					{
						$value = $healthresult[$length-1]["value"];
						
							$array = Zend_Json_Decoder::decode($value);
					
						$outer = array_values($array);
						$outerlength = count($outer);
						$sum=0;
						while($outerlength > 0)
						{
							$inner = array_values($outer[$outerlength-1]);
							$innerlength = count($inner);
							while($innerlength>0)
							{
								$sum += $inner[$innerlength-1];
								$innerlength--;
							}
							$outerlength--;
						}
						
						$result[$index]["/$match/"] = $sum;
					}
					elseif( (preg_match($pattern3,$match)) or (preg_match($pattern4,$match)) or (preg_match($pattern5,$match)))
					{
						$value = $healthresult[$length-1]["value"];
						
							$array = Zend_Json_Decoder::decode($value);
						$outer = array_values($array);
						$outerlength = count($outer);
						$sum=0;
						while($outerlength > 0)
						{
							$inner = array_values($outer[$outerlength-1]);
							$innerlength = count($inner);
							while($innerlength>0)
							{
								$sum += $inner[$innerlength-1]["INR"];
								$innerlength--;
							}
							$outerlength--;
						}
						
						$result[$index]["/$match/"] = $sum;
					}
			
						elseif(preg_match($pattern6,$match))
						{
							$result[$index]["/$match/"] += $healthresult[$length-1]["value"];
							
								
						}
						elseif(preg_match($pattern7,$match))
						{
							
						
							try
							{
								$rake = Zend_Json_Decoder::decode($healthresult[$length-1]["value"]);
								
							}
							catch (Zend_Exception $e)
							{
								if($e->getMessage() == "Illegal Token")
								{
									$rake["RealRake"] = 0;
									$rake["BonusRake"] = 0;
								}
							}							
							$result[$index]["RealRake"] += $rake["RealRake"];
							$result[$index]["BonusRake"] += $rake["BonusRake"];
							//Zenfox_Debug::dump($result[$index]);
						}
						$length--;
					}
			
					
				
					$index++;
			
				}
				
				$length = count($result);
				while($length >0)
				{
					$finalvalue[$length-1]['Time'] = $result[$length-1]["time"];
					$finalvalue[$length-1][$daytype] = $result[$length-1][$daytype];
					$finalvalue[$length-1]['Depositors Count'] = $result[$length-1]["$pattern1"];
					$finalvalue[$length-1]['Deposits Count'] = $result[$length-1]["$pattern2"];
					$finalvalue[$length-1]['Deposits Amount'] = $result[$length-1]["$pattern3"];
					$finalvalue[$length-1]['Deposits Per Player'] = $result[$length-1]["$pattern3"]/$result[$length-1]["$pattern1"];
					$finalvalue[$length-1]['Deposits Per Transaction'] = $result[$length-1]["$pattern3"]/$result[$length-1]["$pattern2"];
					$finalvalue[$length-1]['Bonus Awarded'] = $result[$length-1]["$pattern6"];
					$finalvalue[$length-1]['Real Rake'] = $result[$length-1]["RealRake"];
					$finalvalue[$length-1]['Bonus Rake'] = $result[$length-1]["BonusRake"];
					$length--;
				}
				return  $finalvalue;
			}
		
	}
	
	
	public function gettransactionsummary($report_type_time,$starttime,$endtime)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		
		
		$valuequery = Zenfox_Query::create()
		->from('SystemHealth s')
		->where('s.tag like "networkDeposit%" or s.tag like "frontendDeposit%" or s.tag like "%BonusAwarded" or s.tag like "%ManagementRake"')
		->andWhere('s.report_type = ?', $report_type_time)
		->andWhere('s.start_time >= ?', $starttime)
		->andWhere('s.end_time <= ?', $endtime)
		->orderby('s.frontend_id','ASC');
		
		
		
		$healthresult = $valuequery->fetchArray();
		
		
		$pattern1 = '/DepositorsCount/';
		$pattern2 = '/DepositsCount/';
		$pattern3 = '/DepositsAmount/';
		$pattern4 = '/DepositsPerPlayer/';
		$pattern5 = '/DepositsPerTransaction/';
		$pattern6 = '/BonusAwarded/';
		$pattern7 = '/ManagementRake/';
		
		
// 		Zenfox_Debug::dump($healthresult, "Exception ");
		
			$result['DepositorsCount']["type"] = 'Depositors Count';
			$result['DepositsCount']["type"]= 'Deposits Count';
			$result['DepositsAmount']["type"]= 'Deposits Amount';
			$result['DepositsPerPlayer']["type"] = 'Deposits Per Player';
			$result['DepositsPerTransaction']["type"] = 'Deposits Per Transaction';
			$result['BonusAwarded']["type"] = 'Bonus Awarded';
			$result['RealRake']["type"] = 'Real Rake';
			$result['BonusRake']["type"] = 'Bonus Rake';
		
		if(!empty($healthresult))
		{
			$length = count($healthresult);
			$index = 0;
			$temp = 0;
			while($index < $length)
			{
					$match = $healthresult[$index]["tag"];
					$temp++;
					$frontendobject[$index] = new Frontend();
					$frontends = $frontendobject[$index]->getFrontendnameById($healthresult[$index]["frontend_id"]);
					
					if((preg_match($pattern1,$match)) or  (preg_match($pattern2,$match)) )
					{
						$value = $healthresult[$index]["value"];
						
							$array = Zend_Json_Decoder::decode($value);
						
						$outer = array_values($array);
						$outerlength = count($outer);
						$sum=0;
						while($outerlength > 0)
						{
							$inner = array_values($outer[$outerlength-1]);
							$innerlength = count($inner);
							while($innerlength>0)
							{
								$sum += $inner[$innerlength-1];
								$innerlength--;
							}
							$outerlength--;
						}
						
						if($frontends == "Network")
						{
							$pieces = explode("network", $match);
						}
						else 
						{
							$pieces = explode("frontend", $match);
						}
						
						$result[$pieces[1]][$frontends] += $sum;
					}
					elseif( (preg_match($pattern3,$match)) or (preg_match($pattern4,$match)) or (preg_match($pattern5,$match)))
					{
						$value = $healthresult[$index]["value"];
						
							$array = Zend_Json_Decoder::decode($value);
						
						$outer = array_values($array);
						$outerlength = count($outer);
						$sum=0;
						while($outerlength > 0)
						{
							$inner = array_values($outer[$outerlength-1]);
							$innerlength = count($inner);
							while($innerlength>0)
							{
								$sum += $inner[$innerlength-1]["INR"];
								$innerlength--;
							}
							$outerlength--;
						}
						
						if($frontends == "Network")
						{
							$pieces = explode("network", $match);
						}
						else 
						{
							$pieces = explode("frontend", $match);
						}
						
						$result[$pieces[1]][$frontends] += $sum;
					}
					
					
					if(preg_match($pattern6,$match))
					{
						
						$result["BonusAwarded"][$frontends] += $healthresult[$index]["value"];
					}
					if(preg_match($pattern7,$match))
					{
							try
							{
								$rake = Zend_Json_Decoder::decode($healthresult[$index]["value"]);
							}
							catch (Zend_Exception $e)
							{
								if($e->getMessage() == "Illegal Token")
								{
									$rake["RealRake"] = 0;
									$rake["BonusRake"] = 0;
								}
							}
							
						
						$result["RealRake"][$frontends] += $rake["RealRake"];
						$result["BonusRake"][$frontends] += $rake["BonusRake"];						
						
						
					}
					
					$index++;
			}
			
		
			return $result;
		}
		
	}
	
	public function getRealMoneyWinnerList()
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$dateObject = new Zend_Date();
		$currentWeekDayNumber = $dateObject->get(Zend_Date::WEEKDAY_DIGIT);
		/* $currentWeekDayNumber--;
		$date = Zend_Date::now()->addDay("-$currentWeekDayNumber"); */
		if($currentWeekDayNumber == 0)
		{
			$currentWeekDayNumber += 13;
		}
		else
		{
			$currentWeekDayNumber += 6;
		}
		$date1 = Zend_Date::now()->addDay("-$currentWeekDayNumber");
		
		//$currentTime = $date->get(Zend_Date::W3C);
		$beforeOneWeek = $date1->get(Zend_Date::W3C);
		
		/* $currentTime = explode("T", $currentTime);
		$currentTime = $currentTime[0] . " 00:00:00"; */
		$beforeOneWeek = explode("T", $beforeOneWeek);
		$beforeOneWeek = $beforeOneWeek[0] . " 00:00:00";
		
		$query = Zenfox_Query::create()
					->from('SystemHealth sh')
					->where('sh.tag = ?', 'networkRealWinnersList')
					->andWhere('sh.start_time = ?', $beforeOneWeek);
		
		$result = $query->fetchArray();
		if($result)
		{
			return $result[0];
		}
		return NULL;
	}
	
	public function getBonusMoneyWinnerList()
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$dateObject = new Zend_Date();
		$currentWeekDayNumber = $dateObject->get(Zend_Date::WEEKDAY_DIGIT);
		//$date = Zend_Date::now()->addDay("-$currentWeekDayNumber");
		$currentWeekDayNumber += 6;
		$date1 = Zend_Date::now()->addDay("-$currentWeekDayNumber");
		
		//$currentTime = $date->get(Zend_Date::W3C);
		$beforeOneWeek = $date1->get(Zend_Date::W3C);
		
		/* $currentTime = explode("T", $currentTime);
		$currentTime = $currentTime[0] . " " . $currentTime[1]; */
		$beforeOneWeek = explode("T", $beforeOneWeek);
		$beforeOneWeek = $beforeOneWeek[0] . " 00:00:00";
		
		$query = Zenfox_Query::create()
				->from('SystemHealth sh')
				->where('sh.tag = ?', 'networkFreeWinnersList')
				->andWhere('sh.start_time = ?', $beforeOneWeek);
		
		$result = $query->fetchArray();
		if($result)
		{
			return $result[0];
		}
		return NULL;
	}
	
	public function getnetworkwagerings($starttime ,  $endtime)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
				->from('SystemHealth sh')
				->where('sh.tag = ?', 'networkWageringMatrix')
				->andWhere('sh.start_time >= ?', $starttime)
				->andWhere('sh.start_time < ?', $endtime)
				->orderby('sh.start_time ASC');
				
				$healthresult = $query->fetchArray();
		
		if($healthresult)
		{
			$length = count($healthresult);
			$index = 0;
			$time = 0;
			$result = array();
			
			while($index < $length)
			{
				
				$value =  Zend_Json_Decoder::decode($healthresult[$index]["value"]);
				$start = new Zend_Date($healthresult[$index]["start_time"]);
				$end = new Zend_Date($healthresult[$index]["end_time"]);
				$time =  $start->get(Zend_Date::TIMES)." - ".$end->get(Zend_Date::TIMES);
				$result[$time]["TIME"] = $time;
				$result[$time]["MPP"] += $value["MPP"];
				$result[$time]["5.0"] += $value["5.0"];
				$result[$time]["10.0"] += $value["10.0"];
				$result[$time]["25.0"] += $value["25.0"]; 
				$result[$time]["50.0"] += $value["50.0"];
				$result[$time]["100.0"] += $value["100.0"];
				$result[$time]["250.0"] += $value["250.0"];
				$result[$time]["500.0"] += $value["500.0"];
				$result[$time]["1000.0"] += $value["1000.0"];
				$result[$time]["Total  Hour Wise"] += $value["MPP"]+$value["5.0"]+$value["10.0"]+$value["25.0"]+$value["50.0"]+$value["100.0"]+$value["250.0"]+$value["500.0"]+$value["1000.0"];
				$index++;
			}
			
			return array_values($result);
		}
		return NULL;
		
		
	}
}
