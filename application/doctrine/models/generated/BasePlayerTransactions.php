<?php

/**
 * BasePlayerTransactions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $source_id
 * @property integer $player_id
 * @property enum $transaction_type
 * @property integer $merchant_trans_id
 * @property integer $card_id
 * @property string $game_flavour
 * @property integer $running_machine_id
 * @property integer $session_id
 * @property integer $gamelog_id
 * @property float $amount
 * @property enum $amount_type
 * @property string $transaction_currency
 * @property float $base_currency_amount
 * @property string $base_currency
 * @property integer $frontend_id
 * @property timestamp $trans_start_time
 * @property integer $tracker_id
 * @property integer $csr_id
 * @property string $notes
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BasePlayerTransactions extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('player_transactions');
        $this->hasColumn('source_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('player_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('transaction_type', 'enum', 22, array(
             'type' => 'enum',
             'length' => 22,
             'fixed' => false,
             'values' => 
             array(
              0 => 'AWARD_WINNINGS',
              1 => 'CREDIT_DEPOSITS',
              2 => 'PLACE_WAGER',
              3 => 'WITHDRAWAL_REQUEST',
              4 => 'WITHDRAWAL_FLOWBACK',
              5 => 'WITHDRAWAL_ACCEPT',
              6 => 'WITHDRAWAL_REJECT',
              7 => 'CONVERT_BONUS_REAL',
              8 => 'CONVERT_REAL_BONUS',
              9 => 'CREDIT_BONUS',
              10 => 'CREDIT_BUDDY_BONUS',
              11 => 'ADJUST_BANK',
              12 => 'ADJUST_WINNINGS',
              13 => 'ADJUST_BONUS_WINNINGS',
              14 => 'ADJUST_BONUS_BANK',
              15 => 'LOCK_FUNDS',
              16 => 'UNLOCK_FUNDS',
              17 => 'PLACE_WAGER_LOCK',
              18 => 'AWARD_WINNINGS_LOCK',
              19 => 'ADJUST_ACCOUNT_BALANCE',
              20 => 'CREDIT_BONUS_DUE',
              21 => 'AWARD_WINNINGS_DUE',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('merchant_trans_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('card_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('game_flavour', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             'fixed' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('running_machine_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('session_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('gamelog_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('amount_type', 'enum', 5, array(
             'type' => 'enum',
             'length' => 5,
             'fixed' => false,
             'values' => 
             array(
              0 => 'REAL',
              1 => 'BONUS',
              2 => 'BOTH',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('transaction_currency', 'string', 3, array(
             'type' => 'string',
             'length' => 3,
             'fixed' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('base_currency_amount', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('base_currency', 'string', 3, array(
             'type' => 'string',
             'length' => 3,
             'fixed' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('frontend_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('trans_start_time', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('tracker_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('csr_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

}