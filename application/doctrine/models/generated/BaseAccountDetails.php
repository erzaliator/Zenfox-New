<?php

/**
 * BaseAccountDetails
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $player_id
 * @property string $login
 * @property string $password
 * @property string $email
 * @property integer $tracker_id
 * @property integer $buddy_id
 * @property integer $household_account_id
 * @property integer $affiliate_scheme_id
 * @property string $affiliate_scheme_type
 * @property enum $chat_status
 * @property enum $chat_admin
 * @property integer $frontend_id
 * @property timestamp $created
 * @property enum $status
 * @property float $balance
 * @property float $bank
 * @property float $winnings
 * @property float $cash
 * @property float $bonus_bank
 * @property float $bonus_winnings
 * @property timestamp $last_deposit
 * @property timestamp $last_winning
 * @property timestamp $last_wagered
 * @property timestamp $last_withdrawal
 * @property timestamp $last_login
 * @property string $last_accessed_address
 * @property enum $freegame
 * @property enum $bonusable
 * @property float $loyalty_points_left
 * @property float $total_loyalty_points
 * @property string $language
 * @property string $base_currency
 * @property string $current_currency
 * @property float $max_daily_spending
 * @property float $todays_spendings
 * @property enum $new_registration
 * @property enum $acquired
 * @property timestamp $acquired_date
 * @property float $tracker_earnings
 * @property float $buddy_earnings
 * @property float $total_deposits
 * @property float $total_bonus
 * @property float $max_deposit
 * @property integer $noof_deposits
 * @property float $max_bonus
 * @property float $max_winnings
 * @property integer $bonus_scheme_id
 * @property string $timezone
 * @property float $bonus_due
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseAccountDetails extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('account_details');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('player_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('login', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('tracker_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('buddy_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('household_account_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('affiliate_scheme_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('affiliate_scheme_type', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('chat_status', 'enum', 11, array(
             'type' => 'enum',
             'length' => 11,
             'fixed' => false,
             'values' => 
             array(
              0 => 'ENABLED',
              1 => 'DISABLED',
              2 => 'BANNED',
              3 => 'BLACKLISTED',
             ),
             'primary' => false,
             'default' => 'ENABLED',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('chat_admin', 'enum', 5, array(
             'type' => 'enum',
             'length' => 5,
             'fixed' => false,
             'values' => 
             array(
              0 => 'TRUE',
              1 => 'FALSE',
             ),
             'primary' => false,
             'default' => 'FALSE',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('frontend_id', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('created', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('status', 'enum', 8, array(
             'type' => 'enum',
             'length' => 8,
             'fixed' => false,
             'values' => 
             array(
              0 => 'ENABLED',
              1 => 'DISABLED',
             ),
             'primary' => false,
             'default' => 'ENABLED',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('balance', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('bank', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('winnings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('cash', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('bonus_bank', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('bonus_winnings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_deposit', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_winning', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_wagered', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_withdrawal', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_accessed_address', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('freegame', 'enum', 5, array(
             'type' => 'enum',
             'length' => 5,
             'fixed' => false,
             'values' => 
             array(
              0 => 'TRUE',
              1 => 'FALSE',
             ),
             'primary' => false,
             'default' => 'TRUE',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('bonusable', 'enum', 5, array(
             'type' => 'enum',
             'length' => 5,
             'fixed' => false,
             'values' => 
             array(
              0 => 'TRUE',
              1 => 'FALSE',
             ),
             'primary' => false,
             'default' => 'TRUE',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('loyalty_points_left', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_loyalty_points', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('language', 'string', 7, array(
             'type' => 'string',
             'length' => 7,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('base_currency', 'string', 3, array(
             'type' => 'string',
             'length' => 3,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('current_currency', 'string', 3, array(
             'type' => 'string',
             'length' => 3,
             'fixed' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('max_daily_spending', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '-1',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('todays_spendings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('new_registration', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'values' => 
             array(
              0 => 'NEW',
              1 => 'OLD',
             ),
             'primary' => false,
             'default' => 'NEW',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('acquired', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'values' => 
             array(
              0 => 'ACQUIRED',
              1 => 'NOT_ACQUIRED',
             ),
             'primary' => false,
             'default' => 'NOT_ACQUIRED',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('acquired_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('tracker_earnings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('buddy_earnings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_deposits', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_bonus', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('max_deposit', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('noof_deposits', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('max_bonus', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('max_winnings', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('bonus_scheme_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('timezone', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             'fixed' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('bonus_due', 'float', null, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

}