<?php

/**
 * BaseTicketData
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $ticket_id
 * @property integer $ticket_type_id
 * @property clob $reply_msg
 * @property boolean $dispatch
 * @property enum $sent_by
 * @property integer $owner
 * @property timestamp $time
 * @property enum $ticket_status
 * @property string $note
 * @property integer $user_id
 * @property enum $user_type
 * @property integer $frontend_id
 * @property TicketType $TicketType
 * @property Csr $Csr
 * @property Ticket $Ticket
 * @property Frontend $Frontend
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseTicketData extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('ticket_data');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('ticket_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('ticket_type_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('reply_msg', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('dispatch', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('sent_by', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'AFFILIATE',
              1 => 'PLAYER',
              2 => 'CSR',
             ),
             ));
        $this->hasColumn('owner', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('time', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('ticket_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'OPEN',
              1 => 'CLOSE',
              2 => 'PENDING',
              3 => 'FORWARDED',
              4 => 'DISPATCH',
             ),
             ));
        $this->hasColumn('note', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('user_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'AFFILIATE',
              1 => 'PLAYER',
              2 => 'VISITOR',
             ),
             'primary' => true,
             ));
        $this->hasColumn('frontend_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));


        $this->index('csr_id', array(
             'fields' => 
             array(
              0 => 'owner',
             ),
             ));
        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('TicketType', array(
             'local' => 'ticket_type_id',
             'foreign' => 'id'));

        $this->hasOne('Csr', array(
             'local' => 'owner',
             'foreign' => 'id'));

        $this->hasOne('Ticket', array(
             'local' => 'user_type',
             'foreign' => 'user_type'));

        $this->hasOne('Frontend', array(
             'local' => 'frontend_id',
             'foreign' => 'id'));
    }
}