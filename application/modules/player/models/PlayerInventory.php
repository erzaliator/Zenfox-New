<?php

/**
 * PlayerInventory
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class PlayerInventory extends BasePlayerInventory
{
	public function getDataByPlayerId($playerId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$query = Zenfox_Query::create()
		->from('PlayerInventory p')
		->where('p.player_id = ?', $playerId)		
		->orderBy('p.inventory_id asc');

		try
		{
			$data = $query->fetchArray();
			
		}
		catch(Exception $e)
		{
			return false;
		}
		if($data)
		{
			foreach($data as $key=>$datum)
			{
				$result[$key]['itemId'] = $datum['item_id'];
				$result[$key]['inventoryId'] = $datum['inventory_id'];
				$result[$key]['expiry'] = $datum['expiry'];
				
			}
			return $result;
		}
		return false;
	}

	public function getData($playerId,$itemId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$query = Zenfox_Query::create()
		->from('PlayerInventory p')
		->where('p.player_id = ?', $playerId)
		->andWhere('p.item_id=?',$itemId)		
		->orderBy('p.inventory_id asc');

		try
		{
			$data = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		if($data)
		{
			foreach($data as $key=>$datum)
			{				
				$result[$key]['inventoryId'] = $datum['inventory_id'];
				$result[$key]['expiry'] = $datum['expiry'];
				
			}
			
			return $result;
		}
		return false;
	}
	
	public function insert($playerId,$itemId,$expiry, $jsonData)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$playerInventory = new PlayerInventory();
		$playerInventory->player_id = $playerId;
		$playerInventory->item_id = $itemId;
		$playerInventory->expiry = $expiry;
		$playerInventory->json = $jsonData;
		$playerInventory->save();
	}
	
	public function delete($playerId,$inventoryId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$query = Zenfox_Query::create()
		->delete('PlayerInventory p')		
		->where('p.inventory_id=?',$inventoryId);

		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			return false;
		}
	}
	
	public function cleanInventory($playerId)
	{		
		$result = $this->getDataByPlayerId($playerId);	
		
		foreach($result as $data)
		{	
			
			$expiration_date = strtotime($data['expiry']);				
			$today = strtotime(date("Y-m-d H:i:s"));	
			
			if ($expiration_date < $today) {
							
				$this->delete($playerId,$data['inventoryId']);
								
			}			
		}		
	}
	
	public function getLatestInventoryId($playerId, $itemId)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->select('p.inventory_id')
					->from('PlayerInventory p')
					->where('p.player_id = ?', $playerId)
					->andWhere('p.item_id = ?', $itemId)
					->orderBy('p.inventory_id DESC')
					->limit(1);
					
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return NULL;
		}
		return $result[0]['inventory_id'];
	}

	public function changeUseStatusToFalse($playerId, $inventoryId)
	{
		$json['in_use'] = 'false';
		$jsonData = Zend_Json::encode($json);
		
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->update('PlayerInventory p')
					->set('p.json', '?', $jsonData)
					->where('p.inventory_id = ?', $inventoryId);
					
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			return false;
		}
		return true;
	}
	
	public function changeUseStatusToTrue($playerId, $inventoryId)
	{
		$json['in_use'] = 'true';
		$jsonData = Zend_Json::encode($json);
		
		$conn = Zenfox_Partition::getInstance()->getConnections($playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->update('PlayerInventory p')
					->set('p.json', '?', $jsonData)
					->where('p.inventory_id = ?', $inventoryId);
					
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{
			return false;
		}
		return true;
	}
}
