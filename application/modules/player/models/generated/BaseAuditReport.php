<?php

/**
 * BaseAuditReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $audit_id
 * @property integer $player_id
 * @property integer $source_id
 * @property enum $transaction_type
 * @property integer $merchant_trans_id
 * @property integer $card_id
 * @property string $game_flavour
 * @property integer $running_machine_id
 * @property integer $session_id
 * @property integer $gamelog_id
 * @property float $amount
 * @property enum $amount_type
 * @property string $transaction_currency
 * @property float $base_currency_amount
 * @property string $base_currency
 * @property enum $transaction_status
 * @property string $notes
 * @property integer $frontend_id
 * @property timestamp $trans_start_time
 * @property timestamp $trans_end_time
 * @property integer $parent_id
 * @property enum $processed
 * @property enum $error
 * @property float $cash_balance
 * @property float $bb_balance
 * @property float $real_change
 * @property float $bonus_change
 * @property integer $tracker_id
 * @property float $conversion_rate
 * @property float $converted_amount
 * @property integer $bonus_scheme_id
 * @property integer $bonus_level_id
 * @property float $loyalty_points_left
 * @property float $total_loyalty_points
 * @property PlayerTransaction $PlayerTransaction
 * @property AffiliateTracker $AffiliateTracker
 * @property GameGamegroup $GameGamegroup
 * @property BonusLevel $BonusLevel
 * @property Frontend $Frontend
 * @property BonusScheme $BonusScheme
 * @property Doctrine_Collection $affiliate_transactions
 * @property Doctrine_Collection $ticket_sales
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BaseAuditReport extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('audit_report');
        $this->hasColumn('audit_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('player_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('source_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('transaction_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'AWARD_WINNINGS',
              1 => 'CREDIT_DEPOSITS',
              2 => 'PLACE_WAGER',
              3 => 'CREDIT_BONUS',
              4 => 'WITHDRAWAL_REQUEST',
              5 => 'WITHDRAWAL_FLOWBACK',
              6 => 'WITHDRAWAL_ACCEPT',
              7 => 'WITHDRAWAL_REJECT',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('merchant_trans_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('card_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('game_flavour', 'string', 45, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '45',
             ));
        $this->hasColumn('running_machine_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('session_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('gamelog_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('amount_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'REAL',
              1 => 'BONUS',
              2 => 'BOTH',
             ),
             ));
        $this->hasColumn('transaction_currency', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '3',
             ));
        $this->hasColumn('base_currency_amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('base_currency', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '3',
             ));
        $this->hasColumn('transaction_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'PROCESSED',
              1 => 'STARTED',
              2 => 'ERROR',
              3 => 'UNPROCESSED',
             ),
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => '255',
             ));
        $this->hasColumn('frontend_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('trans_start_time', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('trans_end_time', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('processed', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'PROCESSED',
              1 => 'UNPROCESSED',
              2 => 'STARTED',
             ),
             'default' => 'PROCESSED',
             ));
        $this->hasColumn('error', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'ERROR',
              1 => 'NOERROR',
             ),
             ));
        $this->hasColumn('cash_balance', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('bb_balance', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('real_change', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('bonus_change', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('tracker_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('conversion_rate', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('converted_amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('bonus_scheme_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
        $this->hasColumn('bonus_level_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('loyalty_points_left', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_loyalty_points', 'float', null, array(
             'type' => 'float',
             ));

        $this->option('type', 'MyISAM');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('PlayerTransactions', array(
             'local' => 'source_id',
             'foreign' => 'source_id'));

        $this->hasOne('AffiliateTracker', array(
             'local' => 'tracker_id',
             'foreign' => 'tracker_id'));

        $this->hasOne('GameGamegroup', array(
             'local' => 'game_flavour',
             'foreign' => 'game_flavour'));

        $this->hasOne('BonusLevel', array(
             'local' => 'bonus_scheme_id',
             'foreign' => 'scheme_id'));

        $this->hasOne('Frontend', array(
             'local' => 'frontend_id',
             'foreign' => 'id'));

        $this->hasOne('BonusScheme', array(
             'local' => 'bonus_scheme_id',
             'foreign' => 'id'));

        $this->hasMany('AffiliateTransaction as affiliate_transactions', array(
             'local' => 'player_id',
             'foreign' => 'player_id'));
        $this->hasOne('AccountDetail', array(
        	 'local' => 'player_id',
        	 'foreign' => 'player_id'));

        $this->hasMany('TicketSale as ticket_sales', array(
             'local' => 'player_id',
             'foreign' => 'player_id'));
    }
}
