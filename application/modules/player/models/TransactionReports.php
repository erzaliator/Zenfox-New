<?php

/**
 * AuditReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class TransactionReports extends Doctrine_Record
{
	private $_playerId;
	
	public function __construct($player_id)
	{
		$this->_playerId = $player_id;
	}
	
	public function showTransactions($itemsPerPage, $offset = 0, $fromDateTime = NULL, $toDateTime = NULL, $amount_type = NULL, $transaction_type = NULL)
	{
		if((count($amount_type) > 1) && (count($transaction_type) > 1))
		{
			//$amtString = implode("','", $amount_type);
			$transString = implode("','", $transaction_type);
			
			$query = "Zenfox_Query::create()
				->from('AuditReport r')
				->where('r.player_id = ?', '$this->_playerId')
				->andWhere('r.trans_start_time BETWEEN ? AND ?', array('$fromDateTime', '$toDateTime'))
				->andWhere('r.transaction_status = ?', 'PROCESSED')
				->andWhere('r.error = ?', 'NOERROR')
				->andWhere('r.processed = ?', 'PROCESSED')
				->andWhereIn('r.transaction_type', array('$transString'))
				->orderBy('r.audit_id desc')";
				//->andWhereIn('r.amount_type', array($amtString))";
		}
		elseif((count($amount_type) > 1) && (count($transaction_type) <= 1))
		{
			$transString = $transaction_type[0];
			//$amtString = implode("','", $amount_type);
			$query = "Zenfox_Query::create()
				->from('AuditReport r')
				->where('r.player_id = ?', '$this->_playerId')
				->andWhere('r.trans_start_time BETWEEN ? AND ?', array('$fromDateTime', '$toDateTime'))
				->andWhere('r.transaction_status = ?', 'PROCESSED')
				->andWhere('r.error = ?', 'NOERROR')
				->andWhere('r.processed = ?', 'PROCESSED')
				->andWhereIn('r.transaction_type', array('$transString'))
				->orderBy('r.audit_id desc')";
				//->andWhereIn('r.amount_type', array($amtString))";
		}
		elseif((count($amount_type) <= 1) && (count($transaction_type) > 1))
		{
			$transString = implode("','", $transaction_type);
			//$amtString = $amount_type[0];
			$query = "Zenfox_Query::create()
				->from('AuditReport r')
				->where('r.player_id = ?', '$this->_playerId')
				->andWhere('r.trans_start_time BETWEEN ? AND ?', array('$fromDateTime', '$toDateTime'))
				->andWhere('r.transaction_status = ?', 'PROCESSED')
				->andWhere('r.error = ?', 'NOERROR')
				->andWhere('r.processed = ?', 'PROCESSED')
				->andWhereIn('r.transaction_type', array('$transString'))
				->orderBy('r.audit_id desc')";
				//->andWhereIn('r.amount_type', array('$amtString'))";
		}
		else
		{
			$transString = $transaction_type[0];
			//$amtString = $amount_type[0];
			$query = "Zenfox_Query::create()
				->from('AuditReport r')
				->where('r.player_id = ?', '$this->_playerId')
				->andWhere('r.trans_start_time BETWEEN ? AND ?', array('$fromDateTime', '$toDateTime'))
				->andWhere('r.transaction_status = ?', 'PROCESSED')
				->andWhere('r.error = ?', 'NOERROR')
				->andWhere('r.processed = ?', 'PROCESSED')
				->andWhereIn('r.transaction_type', array('$transString'))
				->orderBy('r.audit_id desc')";
				//->andWhereIn('r.amount_type', array('$amtString'))";
		}
//		$allResults = array();
//		$conn = Zenfox_Partition::getInstance()->getConnections($this->_playerId);
//		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, $this->_playerId);
//		$paginator =  new Zend_Paginator($adapter);
//		$paginator->setItemCountPerPage($itemsPerPage);
//		$paginator->setPageRange(2);
//		$paginator->setCurrentPageNumber($offset);
		try
		{
			$paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
			$paginator =  new Zend_Paginator($adapter);
//			print('items-' . $itemsPerPage);
//			print('offset-' . $offset); exit();
			$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
		}
		catch(Exception $e)
		{
			return false;
		}
		$player = new Player();
		$playerDetails = $player->getAccountDetails($this->_playerId);
		
		$userCurrency = $playerDetails[0]['base_currency'];
		
		$translate = Zend_Registry::get('Zend_Translate');
		$date = new Zenfox_Date();
		$currency = new Zenfox_Currency();
		$transLogs = array();
		$index = 0;
		$frontController = Zend_Controller_Front::getInstance();
		$module = $frontController->getRequest()->getModuleName();
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				switch($logs['transaction_type'])
				{
					case 'AWARD_WINNINGS':
						$transactionType = 'Winning';
						break;
					case 'CREDIT_DEPOSITS':
						$transactionType = 'Deposits';
						break;
					case 'PLACE_WAGER':
						//$transactionType = 'Entry Fees';
						$transactionType = 'Wager';
						break;
					case 'CREDIT_BONUS' :
						$transactionType = 'Bonus Credit';
						break;
					case 'WITHDRAWAL_REQUEST':
						$transactionType = 'Withdrawal Request';
						break;
					case 'WITHDRAWAL_FLOWBACK':
						$transactionType = 'Withdrawal Flowback';
						break;
					case 'WITHDRAWAL_ACCEPT':
						$transactionType = 'Withdrawal Accepted';
						break;
					case 'WITHDRAWAL_REJECT':
						$transactionType = 'Withdrawal Rejected';
						break;
					case 'ADJUST_BANK' :
						$transactionType = 'Adjust Bank';
						break;
					case 'ADJUST_WINNINGS':
						$transactionType = 'Adjust Winnings';
						break;
					case 'ADJUST_BONUS_WINNINGS':
						$transactionType = 'Adjust Bonus Winnings';
						break;
					case 'ADJUST_BONUS_BANK':
						$transactionType = 'Adjust Bonus Bank';
						break;
					case 'ADJUST_ACCOUNT_BALANCE':
						$transactionType = 'Adjust Accont Balance';
						break;
					case 'CREDIT_BONUS_DUE':
						$transactionType = 'Credit Bonus Due';
						break;
					case 'LOCK_FUNDS':
						$transactionType = 'Lock Funds';
						break;
					case 'UNLOCK_FUNDS':
						$transactionType = 'Unlock Funds';
						break;
					case 'PLACE_WAGER_LOCK':
						$transactionType = 'Place Wager Lock';
						break;
					case 'AWARD_WINNINGS_LOCK':
						$transactionType = 'Award Winnings Lock';
						break;
				}
				//Zenfox_Debug::dump($logs, 'logs');
				/* $transLogs[$index][$translate->translate('Audit-Sess-Gamelog')] = $logs['audit_id'] . '-' . $logs['session_id']  . '-'  . $logs['gamelog_id'];
				$transLogs[$index][$translate->translate('Transaction Type')] = $transactionType;
				//$transLogs[$index][$translate->translate('Amount Type')] = $logs['amount_type'];
				//$transLogs[$index][$translate->translate('Currency')] = $logs['transaction_currency'];
				$transLogs[$index][$translate->translate('Amount')] = $currency->setCurrency($logs['transaction_currency'], $logs['amount']);
				if($module == 'player')
				{
					$transLogs[$index][$translate->translate('Balance(Real/Bonus)')] = $currency->setCurrency($userCurrency, $logs['cash_balance']) . "/" . $currency->setCurrency($userCurrency,$logs['bb_balance']);
				}
				if($module == 'admin')
				{
					$transLogs[$index][$translate->translate('Balance')] = $currency->setCurrency($userCurrency, $logs['cash_balance'] + $logs['bb_balance']);
					$transLogs[$index][$translate->translate('(R/B)Change')] = $currency->setCurrency($userCurrency, $logs['real_change']) . "/" . $currency->setCurrency($userCurrency,$logs['bonus_change']);
				}
				//$transLogs[$index][$translate->translate('Balance')] = $currency->setCurrency($userCurrency, $logs['cash_balance']) . "/" . $currency->setCurrency($userCurrency,$logs['bb_balance']);
				//$transLogs[$index][$translate->translate('Real Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['real_change']);
				//$transLogs[$index][$translate->translate('Bonus Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['bonus_change']);
				$status = 'NOERROR';
				if($logs['processed'] != 'PROCESSED')
				{
					$status = 'ERROR';
				}
				$transLogs[$index][$translate->translate('Status')] = $status;
				//$transLogs[$index][$translate->translate('Error')] = $logs['error'];
				$transLogs[$index][$translate->translate('Date/Time')] = $date->setDate($logs['trans_start_time']); */
				
				
				//FOR BINGO CRUSH
				$transLogs[$index][$translate->translate('Game Id')] = $logs['gamelog_id'];
				$transLogs[$index][$translate->translate('Description')] = $transactionType;
				$transLogs[$index][$translate->translate('Amount Type')] = $logs['amount_type'];
				$transLogs[$index][$translate->translate('Amount')] = $logs['amount'];
				$transLogs[$index][$translate->translate('Game Type')] = $this->_getRunningGameName($logs['game_flavour'], $logs['running_machine_id']);
				$transLogs[$index][$translate->translate('Real')] = $currency->setCurrency($userCurrency, $logs['cash_balance']);
				$transLogs[$index][$translate->translate('Bonus')] = $currency->setCurrency($userCurrency, $logs['bb_balance']);
				if($module == 'admin')
				{
					$transLogs[$index][$translate->translate('Note')] = $logs['notes'];
				}
				$transLogs[$index][$translate->translate('Date')] = $logs['trans_start_time'];
				$index++;
			}
			$paginatorSession->unsetAll();
			return array($paginator, $transLogs);
		}
		return NULL;
//		$result = $query->fetchArray();
//		$time = explode('T', $fromDate);
//		$fromDate = $time[0] . " " . $time[1];
//		$time = explode('T', $toDate);
//		$toDate = $time[0] . " " . $time[1];
		
		/*foreach($result as $results)
		{
			if($fromDate)
			{
				if($toDate)
				{
					if(($fromDate <= $results['trans_start_time']) && ($toDate >= $results['trans_start_time']))
					{
						$allResults[] = $results;
					}
				}
				else
				{
					if($fromDate <= $results['trans_start_time'])
					{
						$allResults[] = $results;
					}
				}
			}
			else
			{
				$allResults[] = $results;
			}
		}
		//TODO change it for paginator		
	//	$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, $this->_playerId);
	//	$items = $adapter->getItems($offset, $itemsPerPage);
		return $allResults;*/
	}
	
	public function getPlayerTransaction($fromDateTime = NULL, $toDateTime = NULL, $amount_type = NULL, $transaction_type = NULL)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($this->_playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		if((count($amount_type) > 1) && (count($transaction_type) > 1))
		{
			$query = Zenfox_Query::create()
						->from('AuditReport r')
						->where('r.player_id = ?', $this->_playerId)
						->andWhere('r.processed = ?', 'PROCESSED')
						 ->andWhere('r.trans_start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
						->andWhereIn('r.transaction_type', $transaction_type)
						->orderBy('r.audit_id desc');
		}
		elseif((count($amount_type) > 1) && (count($transaction_type) <= 1))
		{
			$transString = $transaction_type[0];
			$amtString = implode(",", $amount_type);
			$query = Zenfox_Query::create()
						->from('AuditReport r')
						->where('r.player_id = ?', $this->_playerId)
						->andWhere('r.transaction_status = ?', 'PROCESSED')
						->andWhere('r.error = ?', 'NOERROR')
						->andWhere('r.processed = ?', 'PROCESSED')
						->andWhere('r.trans_start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
						->andWhereIn('r.transaction_type', $transaction_type)
						->orderBy('r.audit_id desc');
		}
		elseif((count($amount_type) <= 1) && (count($transaction_type) > 1))
		{
			$transString = implode(",", $transaction_type);
			$amtString = $amount_type[0];
			$query = Zenfox_Query::create()
						->from('AuditReport r')
						->where('r.player_id = ?', $this->_playerId)
						->andWhere('r.transaction_status = ?', 'PROCESSED')
						->andWhere('r.error = ?', 'NOERROR')
						->andWhere('r.processed = ?', 'PROCESSED')
						->andWhere('r.trans_start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
						->andWhereIn('r.transaction_type', $transaction_type)
						->orderBy('r.audit_id desc');
		}
		else
		{
			$transString = $transaction_type[0];
			$amtString = $amount_type[0];
			$query = Zenfox_Query::create()
						->from('AuditReport r')
						->where('r.player_id = ?', $this->_playerId)
						->andWhere('r.transaction_status = ?', 'PROCESSED')
						->andWhere('r.error = ?', 'NOERROR')
						->andWhere('r.processed = ?', 'PROCESSED')
						->andWhere('r.trans_start_time BETWEEN ? AND ?', array($fromDateTime, $toDateTime))
						->andWhereIn('r.transaction_type', $transaction_type)
						->orderBy('r.audit_id desc');
		}
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, 'exception', true, true);
		}
		$transLogs = array();
		if($result)
		{
			$index = 0;
			//$transLogs = array();
			$session = new Zenfox_Auth_Storage_Session();
			$store = $session->read();
			$userCurrency = $store['authDetails'][0]['base_currency'];
			$translate = Zend_Registry::get('Zend_Translate');
			$date = new Zenfox_Date();
			$currency = new Zenfox_Currency();
			
			foreach($result as $transactionData)
			{
				switch($transactionData['transaction_type'])
				{
					case 'AWARD_WINNINGS':
						$transactionType = 'Winning';
						break;
					case 'CREDIT_DEPOSITS':
						$transactionType = 'Deposits';
						break;
					case 'PLACE_WAGER':
						$transactionType = 'Wager';
						break;
					case 'CREDIT_BONUS' :
						$transactionType = 'Bonus Credit';
						break;
					case 'WITHDRAWAL_REQUEST':
						$transactionType = 'Withdrawal Request';
						break;
					case 'WITHDRAWAL_FLOWBACK':
						$transactionType = 'Withdrawal Flowback';
						break;
					case 'WITHDRAWAL_ACCEPT':
						$transactionType = 'Withdrawal Accepted';
						break;
					case 'WITHDRAWAL_REJECT':
						$transactionType = 'Withdrawal Rejected';
						break;
					case 'ADJUST_BANK' :
						$transactionType = 'Adjust Bank';
						break;
					case 'ADJUST_WINNINGS':
						$transactionType = 'Adjust Winnings';
						break;
					case 'ADJUST_BONUS_WINNINGS':
						$transactionType = 'Adjust Bonus Winnings';
						break;
					case 'ADJUST_BONUS_BANK':
						$transactionType = 'Adjust Bonus Bank';
						break;
					case 'ADJUST_ACCOUNT_BALANCE':
						$transactionType = 'Adjust Accont Balance';
						break;
					case 'CREDIT_BONUS_DUE':
						$transactionType = 'Credit Bonus Due';
						break;
					case 'LOCK_FUNDS':
						$transactionType = 'Lock Funds';
						break;
					case 'UNLOCK_FUNDS':
						$transactionType = 'Unlock Funds';
						break;
					case 'PLACE_WAGER_LOCK':
						$transactionType = 'Place Wager Lock';
						break;
					case 'AWARD_WINNINGS_LOCK':
						$transactionType = 'Award Winnings Lock';
						break;
				}
				/* $transLogs[$index][$translate->translate('Audit Id')] = $transactionData['audit_id'];
				$transLogs[$index][$translate->translate('Transaction Type')] = $transactionType;
				//$transLogs[$index][$translate->translate('Amount Type')] = $logs['amount_type'];
				//$transLogs[$index][$translate->translate('Currency')] = $logs['transaction_currency'];
				$transLogs[$index][$translate->translate('Amount')] = $transactionData['amount'];
				$transLogs[$index][$translate->translate('Balance')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance'] + $transactionData['bb_balance']);
				$transLogs[$index][$translate->translate('(R/B)Change')] = $currency->setCurrency($userCurrency, $transactionData['real_change']) . "/" . $currency->setCurrency($userCurrency,$transactionData['bonus_change']);
				//$transLogs[$index][$translate->translate('Real Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['real_change']);
				//$transLogs[$index][$translate->translate('Bonus Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['bonus_change']);
				$status = 'NOERROR';
				if($transactionData['processed'] != 'PROCESSED')
				{
					$status = 'ERROR';
				}
				$transLogs[$index][$translate->translate('Status')] = $status;
				$transLogs[$index][$translate->translate('Date/Time')] = $transactionData['trans_start_time']; */
				
				//FOR BINGOCRUSH
				$transLogs[$index][$translate->translate('Game Id')] = $transactionData['gamelog_id'];
				$transLogs[$index][$translate->translate('Description')] = $transactionType;
				$transLogs[$index][$translate->translate('Amount Type')] = $transactionData['amount_type'];
				$transLogs[$index][$translate->translate('Amount')] = $transactionData['amount'];
				$transLogs[$index][$translate->translate('Game Type')] = $this->_getRunningGameName($transactionData['game_flavour'], $transactionData['running_machine_id']);
				$transLogs[$index][$translate->translate('Real')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance']);
				$transLogs[$index][$translate->translate('Bonus')] = $currency->setCurrency($userCurrency, $transactionData['bb_balance']);
				$transLogs[$index][$translate->translate('Note')] = $transactionData['notes'];
				$transLogs[$index][$translate->translate('Date')] = $transactionData['trans_start_time'];
				
				
				$index++;
			}
		}
		return $transLogs;
	}
	
	public function setCurrency($currency, $value)
	{
		$currency = new Zend_Currency($currency);
		return $currency->toCurrency($value);
	}
	
	public function getLastTransactions($limit)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($this->_playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
		
		$query = Zenfox_Query::create()
					->from('AuditReport a')
					->where('a.player_id = ?', $this->_playerId)
					->andWhere('a.transaction_status = ?', 'PROCESSED')
					->andWhere('a.error = ?', 'NOERROR')
					->andWhere('a.processed = ?', 'PROCESSED')
					->orderBy('a.audit_id desc')
					->limit($limit);
		
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, 'exception');
		}
		$transLogs = array();
		if($result)
		{
			$index = 0;
			$session = new Zenfox_Auth_Storage_Session();
			$store = $session->read();
			$userCurrency = $store['authDetails'][0]['base_currency'];
			$translate = Zend_Registry::get('Zend_Translate');
			$date = new Zenfox_Date();
			$currency = new Zenfox_Currency();
			foreach($result as $transactionData)
			{
				switch($transactionData['transaction_type'])
				{
					case 'AWARD_WINNINGS':
						$transactionType = 'Winning';
						break;
					case 'CREDIT_DEPOSITS':
						$transactionType = 'Deposits';
						break;
					case 'PLACE_WAGER':
						$transactionType = 'Wager';
						break;
					case 'CREDIT_BONUS' :
						$transactionType = 'Bonus Credit';
						break;
					case 'WITHDRAWAL_REQUEST':
						$transactionType = 'Withdrawal Request';
						break;
					case 'WITHDRAWAL_FLOWBACK':
						$transactionType = 'Withdrawal Flowback';
						break;
					case 'WITHDRAWAL_ACCEPT':
						$transactionType = 'Withdrawal Accepted';
						break;
					case 'WITHDRAWAL_REJECT':
						$transactionType = 'Withdrawal Rejected';
						break;
					case 'ADJUST_BANK' :
						$transactionType = 'Adjust Bank';
						break;
					case 'ADJUST_WINNINGS':
						$transactionType = 'Adjust Winnings';
						break;
					case 'ADJUST_BONUS_WINNINGS':
						$transactionType = 'Adjust Bonus Winnings';
						break;
					case 'ADJUST_BONUS_BANK':
						$transactionType = 'Adjust Bonus Bank';
						break;
					case 'ADJUST_ACCOUNT_BALANCE':
						$transactionType = 'Adjust Accont Balance';
						break;
					case 'CREDIT_BONUS_DUE':
						$transactionType = 'Credit Bonus Due';
						break;
					case 'LOCK_FUNDS':
						$transactionType = 'Lock Funds';
						break;
					case 'UNLOCK_FUNDS':
						$transactionType = 'Unlock Funds';
						break;
					case 'PLACE_WAGER_LOCK':
						$transactionType = 'Place Wager Lock';
						break;
					case 'AWARD_WINNINGS_LOCK':
						$transactionType = 'Award Winnings Lock';
						break;
				}
				/* $transLogs[$index][$translate->translate('Audit-Sess-Gamelog')] = $transactionData['audit_id'] . '-' . $transactionData['session_id']  . '-'  . $transactionData['gamelog_id'];
				//$transLogs[$index][$translate->translate('Audit Id')] = $transactionData['audit_id'];
				$transLogs[$index][$translate->translate('Transaction Type')] = $transactionType;
				//$transLogs[$index][$translate->translate('Amount Type')] = $logs['amount_type'];
				//$transLogs[$index][$translate->translate('Currency')] = $logs['transaction_currency'];
				$transLogs[$index][$translate->translate('Amount')] = $transactionData['amount'];
				$transLogs[$index][$translate->translate('Balance')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance'] + $transactionData['bb_balance']);
				$transLogs[$index][$translate->translate('(R/B)Change')] = $currency->setCurrency($userCurrency, $transactionData['real_change']) . "/" . $currency->setCurrency($userCurrency,$transactionData['bonus_change']);
				//$transLogs[$index][$translate->translate('Real Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['real_change']);
				//$transLogs[$index][$translate->translate('Bonus Sub')] = $currency->setCurrency($logs['transaction_currency'], $logs['bonus_change']);
				$status = 'NOERROR';
				if($transactionData['processed'] != 'PROCESSED')
				{
					$status = 'ERROR';
				}
				$transLogs[$index][$translate->translate('Status')] = $status;
				$transLogs[$index][$translate->translate('Date/Time')] = $transactionData['trans_start_time']; */
				
				
				//FOR BINGO CRUSH
				$transLogs[$index][$translate->translate('Game Id')] = $transactionData['gamelog_id'];
				$transLogs[$index][$translate->translate('Description')] = $transactionType;
				$transLogs[$index][$translate->translate('Amount Type')] = $transactionData['amount_type'];
				$transLogs[$index][$translate->translate('Amount')] = $transactionData['amount'];
				$transLogs[$index][$translate->translate('Game Type')] = $this->_getRunningGameName($transactionData['game_flavour'], $transactionData['running_machine_id']);
				$transLogs[$index][$translate->translate('Real')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance']);
				$transLogs[$index][$translate->translate('Bonus')] = $currency->setCurrency($userCurrency, $transactionData['bb_balance']);
				$transLogs[$index][$translate->translate('Date')] = $transactionData['trans_start_time'];
				$index++;
			}
		}
		return $transLogs;
		//Zenfox_Debug::dump($lastFiveTransactions, 'transactions');
	}
	
	public function getRecentTransactions($limit, $transactionType)
	{
		$conn = Zenfox_Partition::getInstance()->getConnections($this->_playerId);
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);
	
		$query = Zenfox_Query::create()
					->from('AuditReport a')
					->where('a.player_id = ?', $this->_playerId)
					->andWhere('a.transaction_status = ?', 'PROCESSED')
					->andWhere('a.error = ?', 'NOERROR')
					->andWhere('a.processed = ?', 'PROCESSED')
					->andWhere('a.transaction_type = ?', $transactionType)
					->orderBy('a.audit_id desc')
					->limit($limit);
	
		try
		{
			$result = $query->fetchArray();
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, 'exception');
		}
		$transLogs = array();
		if($result)
		{
			$index = 0;
			$session = new Zenfox_Auth_Storage_Session();
			$store = $session->read();
			$userCurrency = $store['authDetails'][0]['base_currency'];
			$translate = Zend_Registry::get('Zend_Translate');
			$date = new Zenfox_Date();
			$currency = new Zenfox_Currency();
			foreach($result as $transactionData)
			{
				$transLogs[$index][$translate->translate('Audit-Sess-Gamelog')] = $transactionData['audit_id'] . '-' . $transactionData['session_id']  . '-'  . $transactionData['gamelog_id'];
				$transLogs[$index][$translate->translate('Amount')] = $transactionData['amount'];
				if($transactionType == 'CREDIT_DEPOSITS')
				{
					$transLogs[$index][$translate->translate('Previous Balance')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance'] - $transactionData['real_change']);
					$transLogs[$index][$translate->translate('Current Balance')] = $currency->setCurrency($userCurrency, $transactionData['cash_balance']);
				}
				$transLogs[$index][$translate->translate('Date/Time')] = $transactionData['trans_start_time'];
				$index++;
			}
		}
		return $transLogs;
	}
	
	public function getTransactionsForPlaydorm($transactionType, $fromTime, $toTime, $itemsPerPage, $offset)
	{
		$query = "Zenfox_Query::create()
					->from('AuditReport ar')
					->where('ar.transaction_type = ?', '$transactionType')
					->andWhere('ar.player_id = ?','$this->_playerId')
					->andWhere('ar.trans_start_time BETWEEN ? AND ?', array('$fromTime', '$toTime'))
					->andWhere('ar.transaction_status = ?', 'PROCESSED')
					->andWhere('ar.error = ?', 'NOERROR')
					->andWhere('ar.processed = ?', 'PROCESSED')
					->orderBy('ar.audit_id desc')";
		
		$adapter = new Zenfox_Paginator_Adapter_DoctrineQuery($query, $this->_playerId);
		try
		{
			$paginatorSession = new Zend_Session_Namespace('paginationCount');
			$paginatorSession->value = false;
			$paginator =  new Zend_Paginator($adapter);
			$paginator->setItemCountPerPage($itemsPerPage);
			$paginator->setPageRange(2);
			$paginator->setCurrentPageNumber($offset);
		}
		catch(Exception $e)
		{
			//Zenfox_Debug::dump($e, 'exception', true, true);
			return false;
		}
		$session = new Zenfox_Auth_Storage_Session();
		$store = $session->read();
		$userCurrency = $store['authDetails'][0]['base_currency'];
		$translate = Zend_Registry::get('Zend_Translate');
		$date = new Zenfox_Date();
		$currency = new Zenfox_Currency();
		$transLogs = array();
		$index = 0;
		if($paginator->getTotalItemCount())
		{
			foreach($paginator as $logs)
			{
				$transLogs[$index][$translate->translate('Audit-Sess-Gamelog')] = $logs['audit_id'] . '-' . $logs['session_id']  . '-'  . $logs['gamelog_id'];
				$transLogs[$index][$translate->translate('Amount')] = $logs['amount'];
				if($transactionType == 'CREDIT_DEPOSITS')
				{
					$transLogs[$index][$translate->translate('Previous Balance')] = $currency->setCurrency($userCurrency, $logs['cash_balance'] - $logs['real_change']);
					$transLogs[$index][$translate->translate('Current Balance')] = $currency->setCurrency($userCurrency, $logs['cash_balance']);
				}
				$transLogs[$index][$translate->translate('Date/Time')] = $logs['trans_start_time'];
				$index++;
			}
			$paginatorSession->unsetAll();
			return array($paginator, $transLogs);
		}
		return NULL;
	}
	
	private function _getRunningGameName($gameFlavour, $runningMachineId)
	{
		if($gameFlavour && $runningMachineId)
		{
			$gameGamegroup = new GameGamegroup();
			$gameGroupId = $gameGamegroup->getGamegroupId($gameFlavour, $runningMachineId);
			$gameGroup = new Gamegroup();
			$gameGroupDetail = $gameGroup->getGameGroup($gameGroupId);
			$runningTable = "";
			switch($gameGroupDetail['name'])
			{
				case 'keno':
					$runningTable = new RunningKeno();
					break;
				case 'roulette':
					$runningTable = new RunningRoulette();
					break;
				case 'slots':
					$runningTable = new RunningSlot();
					break;
			}
			if($runningTable)
			{
				$runningMachineData = $runningTable->getMachineData($runningMachineId, $gameFlavour);
				return $runningMachineData['machineName'];
			}
			return NULL;
		}
	}
}
