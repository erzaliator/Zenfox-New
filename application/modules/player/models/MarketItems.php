<?php

/**
 * MarketItems
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class MarketItems extends BaseMarketItems
{
	public function getDataByItemId($itemId)
	{

		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$query = Zenfox_Query::create()
		->from('MarketItems mi')
		->where('mi.item_id = ?', $itemId);
		
		try
		{
			$data = $query->fetchArray();
		}
		catch(Exception $e)
		{
			return false;
		}
		
		if($data)
		{				
			return array(
					'name'					=> $data[0]['name'],
					'description'			=> $data[0]['description'],
					'buyPrice'     			=> $data[0]['buy_price'],
					'buyPoints'    			=> $data[0]['buy_points'],
					'sellPrice'    			=> $data[0]['sell_price'],
					'sellPoints'   			=> $data[0]['sell_points'],
					'giftPrice'    			=> $data[0]['gift_price'],
					'giftPoints'   			=> $data[0]['gift_points'],
					'inventorySize'			=> $data[0]['inventory_size'],
					'periodOfAvailability'  => $data[0]['period_of_availability'],
					'swf'					=> $data[0]['swf'],
					'json'					=> json_decode($data[0]['json']),
					'categoryId'			=> $data[0]['category_id'],
					'identifier'            => $data[0]['identifier'],					
					'enabled'				=> $data[0]['enabled']
			);					
				
		}
		return false;

	}
	public function getDataByCategoryId($categoryId)
	{

		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);

		$query = Zenfox_Query::create()
		->from('MarketItems mi')
		->where('mi.category_id = ?', $categoryId);
		try
		{
			$data = $query->fetchArray();
			
			
		}
		catch(Exception $e)
		{
			return false;
		}
		if($data)
		{				
			foreach($data as $key=>$datum)
			{
				$result[$key]['itemId'] = $datum['item_id'];
				$result[$key]['name'] = $datum['name'];
				$result[$key]['description'] = $datum['description'];
				$result[$key]['buyPrice'] = $datum['buy_price'];
				$result[$key]['sellPrice'] = $datum['sell_price'];
				$result[$key]['giftPrice'] = $datum['gift_price'];
				$result[$key]['buyPoints'] = $datum['buy_points'];
				$result[$key]['sellPoints'] = $datum['sell_points'];
				$result[$key]['giftPoints'] = $datum['gift_points'];
				$result[$key]['periodOfAvailability'] = $datum['period_of_availability'];
				$result[$key]['swf'] = $datum['swf'];
				$result[$key]['inventorySize'] = $datum['inventory_size'];
				$result[$key]['json'] = json_decode($datum['json']);
				$result[$key]['enabled'] = $datum['enabled'];
				$result[$key]['identifier'] = $datum['identifier'];				
			}					
			return $result;	
		}
		return false;

	}
	
	public function updateInventorySize($itemId,$inventorySize)
	{
		$conn = Zenfox_Partition::getInstance()->getMasterConnection();
		Doctrine_Manager::getInstance()->setCurrentConnection($conn);		

		$query = Zenfox_Query::create()
		->update('MarketItems mi')
		->set('mi.inventory_size', '?', $inventorySize)
		->where('mi.item_id = ?', $itemId);			
			
		try
		{
			$query->execute();
		}
		catch(Exception $e)
		{			
			return false;
		}
		return true;
	}
	
	
}